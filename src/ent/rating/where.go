// Code generated by entc, DO NOT EDIT.

package rating

import (
	"entgo.io/ent/dialect/sql"
	"github.com/joelschutz/gomecoma/src/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrigin), v))
	})
}

// OriginalRating applies equality check predicate on the "original_rating" field. It's identical to OriginalRatingEQ.
func OriginalRating(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalRating), v))
	})
}

// NormalizedRating applies equality check predicate on the "normalized_rating" field. It's identical to NormalizedRatingEQ.
func NormalizedRating(v int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalizedRating), v))
	})
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrigin), v))
	})
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrigin), v))
	})
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.Rating {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rating(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrigin), v...))
	})
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.Rating {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rating(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrigin), v...))
	})
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrigin), v))
	})
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrigin), v))
	})
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrigin), v))
	})
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrigin), v))
	})
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrigin), v))
	})
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrigin), v))
	})
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrigin), v))
	})
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrigin), v))
	})
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrigin), v))
	})
}

// OriginalRatingEQ applies the EQ predicate on the "original_rating" field.
func OriginalRatingEQ(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingNEQ applies the NEQ predicate on the "original_rating" field.
func OriginalRatingNEQ(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingIn applies the In predicate on the "original_rating" field.
func OriginalRatingIn(vs ...string) predicate.Rating {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rating(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginalRating), v...))
	})
}

// OriginalRatingNotIn applies the NotIn predicate on the "original_rating" field.
func OriginalRatingNotIn(vs ...string) predicate.Rating {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rating(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginalRating), v...))
	})
}

// OriginalRatingGT applies the GT predicate on the "original_rating" field.
func OriginalRatingGT(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingGTE applies the GTE predicate on the "original_rating" field.
func OriginalRatingGTE(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingLT applies the LT predicate on the "original_rating" field.
func OriginalRatingLT(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingLTE applies the LTE predicate on the "original_rating" field.
func OriginalRatingLTE(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingContains applies the Contains predicate on the "original_rating" field.
func OriginalRatingContains(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingHasPrefix applies the HasPrefix predicate on the "original_rating" field.
func OriginalRatingHasPrefix(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingHasSuffix applies the HasSuffix predicate on the "original_rating" field.
func OriginalRatingHasSuffix(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingEqualFold applies the EqualFold predicate on the "original_rating" field.
func OriginalRatingEqualFold(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOriginalRating), v))
	})
}

// OriginalRatingContainsFold applies the ContainsFold predicate on the "original_rating" field.
func OriginalRatingContainsFold(v string) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOriginalRating), v))
	})
}

// NormalizedRatingEQ applies the EQ predicate on the "normalized_rating" field.
func NormalizedRatingEQ(v int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNormalizedRating), v))
	})
}

// NormalizedRatingNEQ applies the NEQ predicate on the "normalized_rating" field.
func NormalizedRatingNEQ(v int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNormalizedRating), v))
	})
}

// NormalizedRatingIn applies the In predicate on the "normalized_rating" field.
func NormalizedRatingIn(vs ...int) predicate.Rating {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rating(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNormalizedRating), v...))
	})
}

// NormalizedRatingNotIn applies the NotIn predicate on the "normalized_rating" field.
func NormalizedRatingNotIn(vs ...int) predicate.Rating {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rating(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNormalizedRating), v...))
	})
}

// NormalizedRatingGT applies the GT predicate on the "normalized_rating" field.
func NormalizedRatingGT(v int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNormalizedRating), v))
	})
}

// NormalizedRatingGTE applies the GTE predicate on the "normalized_rating" field.
func NormalizedRatingGTE(v int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNormalizedRating), v))
	})
}

// NormalizedRatingLT applies the LT predicate on the "normalized_rating" field.
func NormalizedRatingLT(v int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNormalizedRating), v))
	})
}

// NormalizedRatingLTE applies the LTE predicate on the "normalized_rating" field.
func NormalizedRatingLTE(v int) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNormalizedRating), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rating) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rating) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rating) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		p(s.Not())
	})
}
