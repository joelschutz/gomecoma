// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/joelschutz/gomecoma/src/ent/artist"
	"github.com/joelschutz/gomecoma/src/ent/country"
	"github.com/joelschutz/gomecoma/src/ent/movie"
	"github.com/joelschutz/gomecoma/src/ent/picture"
	"github.com/joelschutz/gomecoma/src/ent/predicate"
)

// ArtistUpdate is the builder for updating Artist entities.
type ArtistUpdate struct {
	config
	hooks    []Hook
	mutation *ArtistMutation
}

// Where appends a list predicates to the ArtistUpdate builder.
func (au *ArtistUpdate) Where(ps ...predicate.Artist) *ArtistUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *ArtistUpdate) SetName(s string) *ArtistUpdate {
	au.mutation.SetName(s)
	return au
}

// SetBirthday sets the "birthday" field.
func (au *ArtistUpdate) SetBirthday(t time.Time) *ArtistUpdate {
	au.mutation.SetBirthday(t)
	return au
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (au *ArtistUpdate) SetNillableBirthday(t *time.Time) *ArtistUpdate {
	if t != nil {
		au.SetBirthday(*t)
	}
	return au
}

// ClearBirthday clears the value of the "birthday" field.
func (au *ArtistUpdate) ClearBirthday() *ArtistUpdate {
	au.mutation.ClearBirthday()
	return au
}

// SetProfilePictureID sets the "profile_picture" edge to the Picture entity by ID.
func (au *ArtistUpdate) SetProfilePictureID(id int) *ArtistUpdate {
	au.mutation.SetProfilePictureID(id)
	return au
}

// SetNillableProfilePictureID sets the "profile_picture" edge to the Picture entity by ID if the given value is not nil.
func (au *ArtistUpdate) SetNillableProfilePictureID(id *int) *ArtistUpdate {
	if id != nil {
		au = au.SetProfilePictureID(*id)
	}
	return au
}

// SetProfilePicture sets the "profile_picture" edge to the Picture entity.
func (au *ArtistUpdate) SetProfilePicture(p *Picture) *ArtistUpdate {
	return au.SetProfilePictureID(p.ID)
}

// AddPictureIDs adds the "pictures" edge to the Picture entity by IDs.
func (au *ArtistUpdate) AddPictureIDs(ids ...int) *ArtistUpdate {
	au.mutation.AddPictureIDs(ids...)
	return au
}

// AddPictures adds the "pictures" edges to the Picture entity.
func (au *ArtistUpdate) AddPictures(p ...*Picture) *ArtistUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPictureIDs(ids...)
}

// AddDirectedIDs adds the "directed" edge to the Movie entity by IDs.
func (au *ArtistUpdate) AddDirectedIDs(ids ...int) *ArtistUpdate {
	au.mutation.AddDirectedIDs(ids...)
	return au
}

// AddDirected adds the "directed" edges to the Movie entity.
func (au *ArtistUpdate) AddDirected(m ...*Movie) *ArtistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddDirectedIDs(ids...)
}

// AddActedIDs adds the "acted" edge to the Movie entity by IDs.
func (au *ArtistUpdate) AddActedIDs(ids ...int) *ArtistUpdate {
	au.mutation.AddActedIDs(ids...)
	return au
}

// AddActed adds the "acted" edges to the Movie entity.
func (au *ArtistUpdate) AddActed(m ...*Movie) *ArtistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddActedIDs(ids...)
}

// AddWroteIDs adds the "wrote" edge to the Movie entity by IDs.
func (au *ArtistUpdate) AddWroteIDs(ids ...int) *ArtistUpdate {
	au.mutation.AddWroteIDs(ids...)
	return au
}

// AddWrote adds the "wrote" edges to the Movie entity.
func (au *ArtistUpdate) AddWrote(m ...*Movie) *ArtistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddWroteIDs(ids...)
}

// AddCountryIDs adds the "countries" edge to the Country entity by IDs.
func (au *ArtistUpdate) AddCountryIDs(ids ...int) *ArtistUpdate {
	au.mutation.AddCountryIDs(ids...)
	return au
}

// AddCountries adds the "countries" edges to the Country entity.
func (au *ArtistUpdate) AddCountries(c ...*Country) *ArtistUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCountryIDs(ids...)
}

// Mutation returns the ArtistMutation object of the builder.
func (au *ArtistUpdate) Mutation() *ArtistMutation {
	return au.mutation
}

// ClearProfilePicture clears the "profile_picture" edge to the Picture entity.
func (au *ArtistUpdate) ClearProfilePicture() *ArtistUpdate {
	au.mutation.ClearProfilePicture()
	return au
}

// ClearPictures clears all "pictures" edges to the Picture entity.
func (au *ArtistUpdate) ClearPictures() *ArtistUpdate {
	au.mutation.ClearPictures()
	return au
}

// RemovePictureIDs removes the "pictures" edge to Picture entities by IDs.
func (au *ArtistUpdate) RemovePictureIDs(ids ...int) *ArtistUpdate {
	au.mutation.RemovePictureIDs(ids...)
	return au
}

// RemovePictures removes "pictures" edges to Picture entities.
func (au *ArtistUpdate) RemovePictures(p ...*Picture) *ArtistUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePictureIDs(ids...)
}

// ClearDirected clears all "directed" edges to the Movie entity.
func (au *ArtistUpdate) ClearDirected() *ArtistUpdate {
	au.mutation.ClearDirected()
	return au
}

// RemoveDirectedIDs removes the "directed" edge to Movie entities by IDs.
func (au *ArtistUpdate) RemoveDirectedIDs(ids ...int) *ArtistUpdate {
	au.mutation.RemoveDirectedIDs(ids...)
	return au
}

// RemoveDirected removes "directed" edges to Movie entities.
func (au *ArtistUpdate) RemoveDirected(m ...*Movie) *ArtistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveDirectedIDs(ids...)
}

// ClearActed clears all "acted" edges to the Movie entity.
func (au *ArtistUpdate) ClearActed() *ArtistUpdate {
	au.mutation.ClearActed()
	return au
}

// RemoveActedIDs removes the "acted" edge to Movie entities by IDs.
func (au *ArtistUpdate) RemoveActedIDs(ids ...int) *ArtistUpdate {
	au.mutation.RemoveActedIDs(ids...)
	return au
}

// RemoveActed removes "acted" edges to Movie entities.
func (au *ArtistUpdate) RemoveActed(m ...*Movie) *ArtistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveActedIDs(ids...)
}

// ClearWrote clears all "wrote" edges to the Movie entity.
func (au *ArtistUpdate) ClearWrote() *ArtistUpdate {
	au.mutation.ClearWrote()
	return au
}

// RemoveWroteIDs removes the "wrote" edge to Movie entities by IDs.
func (au *ArtistUpdate) RemoveWroteIDs(ids ...int) *ArtistUpdate {
	au.mutation.RemoveWroteIDs(ids...)
	return au
}

// RemoveWrote removes "wrote" edges to Movie entities.
func (au *ArtistUpdate) RemoveWrote(m ...*Movie) *ArtistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveWroteIDs(ids...)
}

// ClearCountries clears all "countries" edges to the Country entity.
func (au *ArtistUpdate) ClearCountries() *ArtistUpdate {
	au.mutation.ClearCountries()
	return au
}

// RemoveCountryIDs removes the "countries" edge to Country entities by IDs.
func (au *ArtistUpdate) RemoveCountryIDs(ids ...int) *ArtistUpdate {
	au.mutation.RemoveCountryIDs(ids...)
	return au
}

// RemoveCountries removes "countries" edges to Country entities.
func (au *ArtistUpdate) RemoveCountries(c ...*Country) *ArtistUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCountryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtistUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArtistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtistUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtistUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtistUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ArtistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artist.Table,
			Columns: artist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: artist.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: artist.FieldName,
		})
	}
	if value, ok := au.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: artist.FieldBirthday,
		})
	}
	if au.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: artist.FieldBirthday,
		})
	}
	if au.mutation.ProfilePictureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   artist.ProfilePictureTable,
			Columns: []string{artist.ProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProfilePictureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   artist.ProfilePictureTable,
			Columns: []string{artist.ProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.PicturesTable,
			Columns: []string{artist.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPicturesIDs(); len(nodes) > 0 && !au.mutation.PicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.PicturesTable,
			Columns: []string{artist.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.PicturesTable,
			Columns: []string{artist.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DirectedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.DirectedTable,
			Columns: artist.DirectedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDirectedIDs(); len(nodes) > 0 && !au.mutation.DirectedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.DirectedTable,
			Columns: artist.DirectedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DirectedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.DirectedTable,
			Columns: artist.DirectedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ActedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.ActedTable,
			Columns: artist.ActedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedActedIDs(); len(nodes) > 0 && !au.mutation.ActedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.ActedTable,
			Columns: artist.ActedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.ActedTable,
			Columns: artist.ActedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.WroteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.WroteTable,
			Columns: artist.WrotePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedWroteIDs(); len(nodes) > 0 && !au.mutation.WroteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.WroteTable,
			Columns: artist.WrotePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.WroteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.WroteTable,
			Columns: artist.WrotePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.CountriesTable,
			Columns: artist.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCountriesIDs(); len(nodes) > 0 && !au.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.CountriesTable,
			Columns: artist.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CountriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.CountriesTable,
			Columns: artist.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ArtistUpdateOne is the builder for updating a single Artist entity.
type ArtistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtistMutation
}

// SetName sets the "name" field.
func (auo *ArtistUpdateOne) SetName(s string) *ArtistUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetBirthday sets the "birthday" field.
func (auo *ArtistUpdateOne) SetBirthday(t time.Time) *ArtistUpdateOne {
	auo.mutation.SetBirthday(t)
	return auo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (auo *ArtistUpdateOne) SetNillableBirthday(t *time.Time) *ArtistUpdateOne {
	if t != nil {
		auo.SetBirthday(*t)
	}
	return auo
}

// ClearBirthday clears the value of the "birthday" field.
func (auo *ArtistUpdateOne) ClearBirthday() *ArtistUpdateOne {
	auo.mutation.ClearBirthday()
	return auo
}

// SetProfilePictureID sets the "profile_picture" edge to the Picture entity by ID.
func (auo *ArtistUpdateOne) SetProfilePictureID(id int) *ArtistUpdateOne {
	auo.mutation.SetProfilePictureID(id)
	return auo
}

// SetNillableProfilePictureID sets the "profile_picture" edge to the Picture entity by ID if the given value is not nil.
func (auo *ArtistUpdateOne) SetNillableProfilePictureID(id *int) *ArtistUpdateOne {
	if id != nil {
		auo = auo.SetProfilePictureID(*id)
	}
	return auo
}

// SetProfilePicture sets the "profile_picture" edge to the Picture entity.
func (auo *ArtistUpdateOne) SetProfilePicture(p *Picture) *ArtistUpdateOne {
	return auo.SetProfilePictureID(p.ID)
}

// AddPictureIDs adds the "pictures" edge to the Picture entity by IDs.
func (auo *ArtistUpdateOne) AddPictureIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.AddPictureIDs(ids...)
	return auo
}

// AddPictures adds the "pictures" edges to the Picture entity.
func (auo *ArtistUpdateOne) AddPictures(p ...*Picture) *ArtistUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPictureIDs(ids...)
}

// AddDirectedIDs adds the "directed" edge to the Movie entity by IDs.
func (auo *ArtistUpdateOne) AddDirectedIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.AddDirectedIDs(ids...)
	return auo
}

// AddDirected adds the "directed" edges to the Movie entity.
func (auo *ArtistUpdateOne) AddDirected(m ...*Movie) *ArtistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddDirectedIDs(ids...)
}

// AddActedIDs adds the "acted" edge to the Movie entity by IDs.
func (auo *ArtistUpdateOne) AddActedIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.AddActedIDs(ids...)
	return auo
}

// AddActed adds the "acted" edges to the Movie entity.
func (auo *ArtistUpdateOne) AddActed(m ...*Movie) *ArtistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddActedIDs(ids...)
}

// AddWroteIDs adds the "wrote" edge to the Movie entity by IDs.
func (auo *ArtistUpdateOne) AddWroteIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.AddWroteIDs(ids...)
	return auo
}

// AddWrote adds the "wrote" edges to the Movie entity.
func (auo *ArtistUpdateOne) AddWrote(m ...*Movie) *ArtistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddWroteIDs(ids...)
}

// AddCountryIDs adds the "countries" edge to the Country entity by IDs.
func (auo *ArtistUpdateOne) AddCountryIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.AddCountryIDs(ids...)
	return auo
}

// AddCountries adds the "countries" edges to the Country entity.
func (auo *ArtistUpdateOne) AddCountries(c ...*Country) *ArtistUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCountryIDs(ids...)
}

// Mutation returns the ArtistMutation object of the builder.
func (auo *ArtistUpdateOne) Mutation() *ArtistMutation {
	return auo.mutation
}

// ClearProfilePicture clears the "profile_picture" edge to the Picture entity.
func (auo *ArtistUpdateOne) ClearProfilePicture() *ArtistUpdateOne {
	auo.mutation.ClearProfilePicture()
	return auo
}

// ClearPictures clears all "pictures" edges to the Picture entity.
func (auo *ArtistUpdateOne) ClearPictures() *ArtistUpdateOne {
	auo.mutation.ClearPictures()
	return auo
}

// RemovePictureIDs removes the "pictures" edge to Picture entities by IDs.
func (auo *ArtistUpdateOne) RemovePictureIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.RemovePictureIDs(ids...)
	return auo
}

// RemovePictures removes "pictures" edges to Picture entities.
func (auo *ArtistUpdateOne) RemovePictures(p ...*Picture) *ArtistUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePictureIDs(ids...)
}

// ClearDirected clears all "directed" edges to the Movie entity.
func (auo *ArtistUpdateOne) ClearDirected() *ArtistUpdateOne {
	auo.mutation.ClearDirected()
	return auo
}

// RemoveDirectedIDs removes the "directed" edge to Movie entities by IDs.
func (auo *ArtistUpdateOne) RemoveDirectedIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.RemoveDirectedIDs(ids...)
	return auo
}

// RemoveDirected removes "directed" edges to Movie entities.
func (auo *ArtistUpdateOne) RemoveDirected(m ...*Movie) *ArtistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveDirectedIDs(ids...)
}

// ClearActed clears all "acted" edges to the Movie entity.
func (auo *ArtistUpdateOne) ClearActed() *ArtistUpdateOne {
	auo.mutation.ClearActed()
	return auo
}

// RemoveActedIDs removes the "acted" edge to Movie entities by IDs.
func (auo *ArtistUpdateOne) RemoveActedIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.RemoveActedIDs(ids...)
	return auo
}

// RemoveActed removes "acted" edges to Movie entities.
func (auo *ArtistUpdateOne) RemoveActed(m ...*Movie) *ArtistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveActedIDs(ids...)
}

// ClearWrote clears all "wrote" edges to the Movie entity.
func (auo *ArtistUpdateOne) ClearWrote() *ArtistUpdateOne {
	auo.mutation.ClearWrote()
	return auo
}

// RemoveWroteIDs removes the "wrote" edge to Movie entities by IDs.
func (auo *ArtistUpdateOne) RemoveWroteIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.RemoveWroteIDs(ids...)
	return auo
}

// RemoveWrote removes "wrote" edges to Movie entities.
func (auo *ArtistUpdateOne) RemoveWrote(m ...*Movie) *ArtistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveWroteIDs(ids...)
}

// ClearCountries clears all "countries" edges to the Country entity.
func (auo *ArtistUpdateOne) ClearCountries() *ArtistUpdateOne {
	auo.mutation.ClearCountries()
	return auo
}

// RemoveCountryIDs removes the "countries" edge to Country entities by IDs.
func (auo *ArtistUpdateOne) RemoveCountryIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.RemoveCountryIDs(ids...)
	return auo
}

// RemoveCountries removes "countries" edges to Country entities.
func (auo *ArtistUpdateOne) RemoveCountries(c ...*Country) *ArtistUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCountryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtistUpdateOne) Select(field string, fields ...string) *ArtistUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Artist entity.
func (auo *ArtistUpdateOne) Save(ctx context.Context) (*Artist, error) {
	var (
		err  error
		node *Artist
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArtistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtistUpdateOne) SaveX(ctx context.Context) *Artist {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtistUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtistUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ArtistUpdateOne) sqlSave(ctx context.Context) (_node *Artist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artist.Table,
			Columns: artist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: artist.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Artist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artist.FieldID)
		for _, f := range fields {
			if !artist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != artist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: artist.FieldName,
		})
	}
	if value, ok := auo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: artist.FieldBirthday,
		})
	}
	if auo.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: artist.FieldBirthday,
		})
	}
	if auo.mutation.ProfilePictureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   artist.ProfilePictureTable,
			Columns: []string{artist.ProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProfilePictureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   artist.ProfilePictureTable,
			Columns: []string{artist.ProfilePictureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.PicturesTable,
			Columns: []string{artist.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPicturesIDs(); len(nodes) > 0 && !auo.mutation.PicturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.PicturesTable,
			Columns: []string{artist.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PicturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artist.PicturesTable,
			Columns: []string{artist.PicturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DirectedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.DirectedTable,
			Columns: artist.DirectedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDirectedIDs(); len(nodes) > 0 && !auo.mutation.DirectedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.DirectedTable,
			Columns: artist.DirectedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DirectedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.DirectedTable,
			Columns: artist.DirectedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ActedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.ActedTable,
			Columns: artist.ActedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedActedIDs(); len(nodes) > 0 && !auo.mutation.ActedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.ActedTable,
			Columns: artist.ActedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.ActedTable,
			Columns: artist.ActedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.WroteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.WroteTable,
			Columns: artist.WrotePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedWroteIDs(); len(nodes) > 0 && !auo.mutation.WroteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.WroteTable,
			Columns: artist.WrotePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.WroteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.WroteTable,
			Columns: artist.WrotePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.CountriesTable,
			Columns: artist.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCountriesIDs(); len(nodes) > 0 && !auo.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.CountriesTable,
			Columns: artist.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CountriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.CountriesTable,
			Columns: artist.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Artist{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
