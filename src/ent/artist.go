// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/joelschutz/gomecoma/src/ent/artist"
	"github.com/joelschutz/gomecoma/src/ent/picture"
)

// Artist is the model entity for the Artist schema.
type Artist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday time.Time `json:"birthday,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtistQuery when eager-loading is set.
	Edges                  ArtistEdges `json:"edges"`
	artist_profile_picture *int
}

// ArtistEdges holds the relations/edges for other nodes in the graph.
type ArtistEdges struct {
	// ProfilePicture holds the value of the profile_picture edge.
	ProfilePicture *Picture `json:"profile_picture,omitempty"`
	// Pictures holds the value of the pictures edge.
	Pictures []*Picture `json:"pictures,omitempty"`
	// Directed holds the value of the directed edge.
	Directed []*Movie `json:"directed,omitempty"`
	// Acted holds the value of the acted edge.
	Acted []*Movie `json:"acted,omitempty"`
	// Wrote holds the value of the wrote edge.
	Wrote []*Movie `json:"wrote,omitempty"`
	// Countries holds the value of the countries edge.
	Countries []*Country `json:"countries,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ProfilePictureOrErr returns the ProfilePicture value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtistEdges) ProfilePictureOrErr() (*Picture, error) {
	if e.loadedTypes[0] {
		if e.ProfilePicture == nil {
			// The edge profile_picture was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: picture.Label}
		}
		return e.ProfilePicture, nil
	}
	return nil, &NotLoadedError{edge: "profile_picture"}
}

// PicturesOrErr returns the Pictures value or an error if the edge
// was not loaded in eager-loading.
func (e ArtistEdges) PicturesOrErr() ([]*Picture, error) {
	if e.loadedTypes[1] {
		return e.Pictures, nil
	}
	return nil, &NotLoadedError{edge: "pictures"}
}

// DirectedOrErr returns the Directed value or an error if the edge
// was not loaded in eager-loading.
func (e ArtistEdges) DirectedOrErr() ([]*Movie, error) {
	if e.loadedTypes[2] {
		return e.Directed, nil
	}
	return nil, &NotLoadedError{edge: "directed"}
}

// ActedOrErr returns the Acted value or an error if the edge
// was not loaded in eager-loading.
func (e ArtistEdges) ActedOrErr() ([]*Movie, error) {
	if e.loadedTypes[3] {
		return e.Acted, nil
	}
	return nil, &NotLoadedError{edge: "acted"}
}

// WroteOrErr returns the Wrote value or an error if the edge
// was not loaded in eager-loading.
func (e ArtistEdges) WroteOrErr() ([]*Movie, error) {
	if e.loadedTypes[4] {
		return e.Wrote, nil
	}
	return nil, &NotLoadedError{edge: "wrote"}
}

// CountriesOrErr returns the Countries value or an error if the edge
// was not loaded in eager-loading.
func (e ArtistEdges) CountriesOrErr() ([]*Country, error) {
	if e.loadedTypes[5] {
		return e.Countries, nil
	}
	return nil, &NotLoadedError{edge: "countries"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Artist) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case artist.FieldID:
			values[i] = new(sql.NullInt64)
		case artist.FieldName:
			values[i] = new(sql.NullString)
		case artist.FieldBirthday:
			values[i] = new(sql.NullTime)
		case artist.ForeignKeys[0]: // artist_profile_picture
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Artist", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Artist fields.
func (a *Artist) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case artist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case artist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case artist.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				a.Birthday = value.Time
			}
		case artist.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field artist_profile_picture", value)
			} else if value.Valid {
				a.artist_profile_picture = new(int)
				*a.artist_profile_picture = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProfilePicture queries the "profile_picture" edge of the Artist entity.
func (a *Artist) QueryProfilePicture() *PictureQuery {
	return (&ArtistClient{config: a.config}).QueryProfilePicture(a)
}

// QueryPictures queries the "pictures" edge of the Artist entity.
func (a *Artist) QueryPictures() *PictureQuery {
	return (&ArtistClient{config: a.config}).QueryPictures(a)
}

// QueryDirected queries the "directed" edge of the Artist entity.
func (a *Artist) QueryDirected() *MovieQuery {
	return (&ArtistClient{config: a.config}).QueryDirected(a)
}

// QueryActed queries the "acted" edge of the Artist entity.
func (a *Artist) QueryActed() *MovieQuery {
	return (&ArtistClient{config: a.config}).QueryActed(a)
}

// QueryWrote queries the "wrote" edge of the Artist entity.
func (a *Artist) QueryWrote() *MovieQuery {
	return (&ArtistClient{config: a.config}).QueryWrote(a)
}

// QueryCountries queries the "countries" edge of the Artist entity.
func (a *Artist) QueryCountries() *CountryQuery {
	return (&ArtistClient{config: a.config}).QueryCountries(a)
}

// Update returns a builder for updating this Artist.
// Note that you need to call Artist.Unwrap() before calling this method if this Artist
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Artist) Update() *ArtistUpdateOne {
	return (&ArtistClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Artist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Artist) Unwrap() *Artist {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Artist is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Artist) String() string {
	var builder strings.Builder
	builder.WriteString("Artist(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", birthday=")
	builder.WriteString(a.Birthday.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Artists is a parsable slice of Artist.
type Artists []*Artist

func (a Artists) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
