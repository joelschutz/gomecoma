// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/joelschutz/gomecoma/src/ent/rating"
)

// Rating is the model entity for the Rating schema.
type Rating struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// OriginalRating holds the value of the "original_rating" field.
	OriginalRating string `json:"original_rating,omitempty"`
	// NormalizedRating holds the value of the "normalized_rating" field.
	NormalizedRating int `json:"normalized_rating,omitempty"`
	movie_ratings    *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rating) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rating.FieldID, rating.FieldNormalizedRating:
			values[i] = new(sql.NullInt64)
		case rating.FieldOrigin, rating.FieldOriginalRating:
			values[i] = new(sql.NullString)
		case rating.ForeignKeys[0]: // movie_ratings
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Rating", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rating fields.
func (r *Rating) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rating.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rating.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				r.Origin = value.String
			}
		case rating.FieldOriginalRating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_rating", values[i])
			} else if value.Valid {
				r.OriginalRating = value.String
			}
		case rating.FieldNormalizedRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field normalized_rating", values[i])
			} else if value.Valid {
				r.NormalizedRating = int(value.Int64)
			}
		case rating.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field movie_ratings", value)
			} else if value.Valid {
				r.movie_ratings = new(int)
				*r.movie_ratings = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Rating.
// Note that you need to call Rating.Unwrap() before calling this method if this Rating
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rating) Update() *RatingUpdateOne {
	return (&RatingClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Rating entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rating) Unwrap() *Rating {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rating is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rating) String() string {
	var builder strings.Builder
	builder.WriteString("Rating(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", origin=")
	builder.WriteString(r.Origin)
	builder.WriteString(", original_rating=")
	builder.WriteString(r.OriginalRating)
	builder.WriteString(", normalized_rating=")
	builder.WriteString(fmt.Sprintf("%v", r.NormalizedRating))
	builder.WriteByte(')')
	return builder.String()
}

// Ratings is a parsable slice of Rating.
type Ratings []*Rating

func (r Ratings) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
