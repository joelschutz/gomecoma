// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/joelschutz/gomecoma/src/ent/file"
	"github.com/joelschutz/gomecoma/src/ent/movie"
)

// File is the model entity for the File schema.
type File struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Type holds the value of the "type" field.
	Type file.Type `json:"type,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// ExternalInfoProvider holds the value of the "external_info_provider" field.
	ExternalInfoProvider string `json:"external_info_provider,omitempty"`
	// Results holds the value of the "results" field.
	Results string `json:"results,omitempty"`
	// Synced holds the value of the "synced" field.
	Synced bool `json:"synced,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileQuery when eager-loading is set.
	Edges      FileEdges `json:"edges"`
	movie_file *int
}

// FileEdges holds the relations/edges for other nodes in the graph.
type FileEdges struct {
	// Movie holds the value of the movie edge.
	Movie *Movie `json:"movie,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MovieOrErr returns the Movie value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) MovieOrErr() (*Movie, error) {
	if e.loadedTypes[0] {
		if e.Movie == nil {
			// The edge movie was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: movie.Label}
		}
		return e.Movie, nil
	}
	return nil, &NotLoadedError{edge: "movie"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*File) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case file.FieldSynced:
			values[i] = new(sql.NullBool)
		case file.FieldID:
			values[i] = new(sql.NullInt64)
		case file.FieldName, file.FieldPath, file.FieldType, file.FieldExternalID, file.FieldExternalInfoProvider, file.FieldResults:
			values[i] = new(sql.NullString)
		case file.ForeignKeys[0]: // movie_file
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type File", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the File fields.
func (f *File) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case file.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case file.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case file.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				f.Path = value.String
			}
		case file.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				f.Type = file.Type(value.String)
			}
		case file.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				f.ExternalID = value.String
			}
		case file.FieldExternalInfoProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_info_provider", values[i])
			} else if value.Valid {
				f.ExternalInfoProvider = value.String
			}
		case file.FieldResults:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field results", values[i])
			} else if value.Valid {
				f.Results = value.String
			}
		case file.FieldSynced:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field synced", values[i])
			} else if value.Valid {
				f.Synced = value.Bool
			}
		case file.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field movie_file", value)
			} else if value.Valid {
				f.movie_file = new(int)
				*f.movie_file = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMovie queries the "movie" edge of the File entity.
func (f *File) QueryMovie() *MovieQuery {
	return (&FileClient{config: f.config}).QueryMovie(f)
}

// Update returns a builder for updating this File.
// Note that you need to call File.Unwrap() before calling this method if this File
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *File) Update() *FileUpdateOne {
	return (&FileClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the File entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *File) Unwrap() *File {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: File is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *File) String() string {
	var builder strings.Builder
	builder.WriteString("File(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", path=")
	builder.WriteString(f.Path)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", f.Type))
	builder.WriteString(", external_id=")
	builder.WriteString(f.ExternalID)
	builder.WriteString(", external_info_provider=")
	builder.WriteString(f.ExternalInfoProvider)
	builder.WriteString(", results=")
	builder.WriteString(f.Results)
	builder.WriteString(", synced=")
	builder.WriteString(fmt.Sprintf("%v", f.Synced))
	builder.WriteByte(')')
	return builder.String()
}

// Files is a parsable slice of File.
type Files []*File

func (f Files) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
