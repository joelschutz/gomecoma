// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/joelschutz/gomecoma/src/ent/artist"
	"github.com/joelschutz/gomecoma/src/ent/country"
	"github.com/joelschutz/gomecoma/src/ent/movie"
	"github.com/joelschutz/gomecoma/src/ent/moviegenre"
	"github.com/joelschutz/gomecoma/src/ent/picture"
	"github.com/joelschutz/gomecoma/src/ent/predicate"
	"github.com/joelschutz/gomecoma/src/ent/rating"
)

// MovieUpdate is the builder for updating Movie entities.
type MovieUpdate struct {
	config
	hooks    []Hook
	mutation *MovieMutation
}

// Where appends a list predicates to the MovieUpdate builder.
func (mu *MovieUpdate) Where(ps ...predicate.Movie) *MovieUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MovieUpdate) SetTitle(s string) *MovieUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetOriginalTitle sets the "original_title" field.
func (mu *MovieUpdate) SetOriginalTitle(s string) *MovieUpdate {
	mu.mutation.SetOriginalTitle(s)
	return mu
}

// SetNillableOriginalTitle sets the "original_title" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableOriginalTitle(s *string) *MovieUpdate {
	if s != nil {
		mu.SetOriginalTitle(*s)
	}
	return mu
}

// ClearOriginalTitle clears the value of the "original_title" field.
func (mu *MovieUpdate) ClearOriginalTitle() *MovieUpdate {
	mu.mutation.ClearOriginalTitle()
	return mu
}

// SetLanguages sets the "languages" field.
func (mu *MovieUpdate) SetLanguages(s []string) *MovieUpdate {
	mu.mutation.SetLanguages(s)
	return mu
}

// ClearLanguages clears the value of the "languages" field.
func (mu *MovieUpdate) ClearLanguages() *MovieUpdate {
	mu.mutation.ClearLanguages()
	return mu
}

// SetReleaseDate sets the "release_date" field.
func (mu *MovieUpdate) SetReleaseDate(t time.Time) *MovieUpdate {
	mu.mutation.SetReleaseDate(t)
	return mu
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableReleaseDate(t *time.Time) *MovieUpdate {
	if t != nil {
		mu.SetReleaseDate(*t)
	}
	return mu
}

// ClearReleaseDate clears the value of the "release_date" field.
func (mu *MovieUpdate) ClearReleaseDate() *MovieUpdate {
	mu.mutation.ClearReleaseDate()
	return mu
}

// SetPlot sets the "plot" field.
func (mu *MovieUpdate) SetPlot(s string) *MovieUpdate {
	mu.mutation.SetPlot(s)
	return mu
}

// SetNillablePlot sets the "plot" field if the given value is not nil.
func (mu *MovieUpdate) SetNillablePlot(s *string) *MovieUpdate {
	if s != nil {
		mu.SetPlot(*s)
	}
	return mu
}

// ClearPlot clears the value of the "plot" field.
func (mu *MovieUpdate) ClearPlot() *MovieUpdate {
	mu.mutation.ClearPlot()
	return mu
}

// SetDuration sets the "duration" field.
func (mu *MovieUpdate) SetDuration(i int) *MovieUpdate {
	mu.mutation.ResetDuration()
	mu.mutation.SetDuration(i)
	return mu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableDuration(i *int) *MovieUpdate {
	if i != nil {
		mu.SetDuration(*i)
	}
	return mu
}

// AddDuration adds i to the "duration" field.
func (mu *MovieUpdate) AddDuration(i int) *MovieUpdate {
	mu.mutation.AddDuration(i)
	return mu
}

// ClearDuration clears the value of the "duration" field.
func (mu *MovieUpdate) ClearDuration() *MovieUpdate {
	mu.mutation.ClearDuration()
	return mu
}

// SetWatched sets the "watched" field.
func (mu *MovieUpdate) SetWatched(b bool) *MovieUpdate {
	mu.mutation.SetWatched(b)
	return mu
}

// SetNillableWatched sets the "watched" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableWatched(b *bool) *MovieUpdate {
	if b != nil {
		mu.SetWatched(*b)
	}
	return mu
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by IDs.
func (mu *MovieUpdate) AddRatingIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddRatingIDs(ids...)
	return mu
}

// AddRatings adds the "ratings" edges to the Rating entity.
func (mu *MovieUpdate) AddRatings(r ...*Rating) *MovieUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddRatingIDs(ids...)
}

// SetPosterID sets the "poster" edge to the Picture entity by ID.
func (mu *MovieUpdate) SetPosterID(id int) *MovieUpdate {
	mu.mutation.SetPosterID(id)
	return mu
}

// SetNillablePosterID sets the "poster" edge to the Picture entity by ID if the given value is not nil.
func (mu *MovieUpdate) SetNillablePosterID(id *int) *MovieUpdate {
	if id != nil {
		mu = mu.SetPosterID(*id)
	}
	return mu
}

// SetPoster sets the "poster" edge to the Picture entity.
func (mu *MovieUpdate) SetPoster(p *Picture) *MovieUpdate {
	return mu.SetPosterID(p.ID)
}

// AddFanartIDs adds the "fanart" edge to the Picture entity by IDs.
func (mu *MovieUpdate) AddFanartIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddFanartIDs(ids...)
	return mu
}

// AddFanart adds the "fanart" edges to the Picture entity.
func (mu *MovieUpdate) AddFanart(p ...*Picture) *MovieUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddFanartIDs(ids...)
}

// AddCastIDs adds the "cast" edge to the Artist entity by IDs.
func (mu *MovieUpdate) AddCastIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddCastIDs(ids...)
	return mu
}

// AddCast adds the "cast" edges to the Artist entity.
func (mu *MovieUpdate) AddCast(a ...*Artist) *MovieUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddCastIDs(ids...)
}

// AddDirectorIDs adds the "directors" edge to the Artist entity by IDs.
func (mu *MovieUpdate) AddDirectorIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddDirectorIDs(ids...)
	return mu
}

// AddDirectors adds the "directors" edges to the Artist entity.
func (mu *MovieUpdate) AddDirectors(a ...*Artist) *MovieUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddDirectorIDs(ids...)
}

// AddWriterIDs adds the "writers" edge to the Artist entity by IDs.
func (mu *MovieUpdate) AddWriterIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddWriterIDs(ids...)
	return mu
}

// AddWriters adds the "writers" edges to the Artist entity.
func (mu *MovieUpdate) AddWriters(a ...*Artist) *MovieUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddWriterIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the MovieGenre entity by IDs.
func (mu *MovieUpdate) AddGenreIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddGenreIDs(ids...)
	return mu
}

// AddGenres adds the "genres" edges to the MovieGenre entity.
func (mu *MovieUpdate) AddGenres(m ...*MovieGenre) *MovieUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddGenreIDs(ids...)
}

// AddCountryIDs adds the "countries" edge to the Country entity by IDs.
func (mu *MovieUpdate) AddCountryIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddCountryIDs(ids...)
	return mu
}

// AddCountries adds the "countries" edges to the Country entity.
func (mu *MovieUpdate) AddCountries(c ...*Country) *MovieUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddCountryIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (mu *MovieUpdate) Mutation() *MovieMutation {
	return mu.mutation
}

// ClearRatings clears all "ratings" edges to the Rating entity.
func (mu *MovieUpdate) ClearRatings() *MovieUpdate {
	mu.mutation.ClearRatings()
	return mu
}

// RemoveRatingIDs removes the "ratings" edge to Rating entities by IDs.
func (mu *MovieUpdate) RemoveRatingIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveRatingIDs(ids...)
	return mu
}

// RemoveRatings removes "ratings" edges to Rating entities.
func (mu *MovieUpdate) RemoveRatings(r ...*Rating) *MovieUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveRatingIDs(ids...)
}

// ClearPoster clears the "poster" edge to the Picture entity.
func (mu *MovieUpdate) ClearPoster() *MovieUpdate {
	mu.mutation.ClearPoster()
	return mu
}

// ClearFanart clears all "fanart" edges to the Picture entity.
func (mu *MovieUpdate) ClearFanart() *MovieUpdate {
	mu.mutation.ClearFanart()
	return mu
}

// RemoveFanartIDs removes the "fanart" edge to Picture entities by IDs.
func (mu *MovieUpdate) RemoveFanartIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveFanartIDs(ids...)
	return mu
}

// RemoveFanart removes "fanart" edges to Picture entities.
func (mu *MovieUpdate) RemoveFanart(p ...*Picture) *MovieUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemoveFanartIDs(ids...)
}

// ClearCast clears all "cast" edges to the Artist entity.
func (mu *MovieUpdate) ClearCast() *MovieUpdate {
	mu.mutation.ClearCast()
	return mu
}

// RemoveCastIDs removes the "cast" edge to Artist entities by IDs.
func (mu *MovieUpdate) RemoveCastIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveCastIDs(ids...)
	return mu
}

// RemoveCast removes "cast" edges to Artist entities.
func (mu *MovieUpdate) RemoveCast(a ...*Artist) *MovieUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveCastIDs(ids...)
}

// ClearDirectors clears all "directors" edges to the Artist entity.
func (mu *MovieUpdate) ClearDirectors() *MovieUpdate {
	mu.mutation.ClearDirectors()
	return mu
}

// RemoveDirectorIDs removes the "directors" edge to Artist entities by IDs.
func (mu *MovieUpdate) RemoveDirectorIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveDirectorIDs(ids...)
	return mu
}

// RemoveDirectors removes "directors" edges to Artist entities.
func (mu *MovieUpdate) RemoveDirectors(a ...*Artist) *MovieUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveDirectorIDs(ids...)
}

// ClearWriters clears all "writers" edges to the Artist entity.
func (mu *MovieUpdate) ClearWriters() *MovieUpdate {
	mu.mutation.ClearWriters()
	return mu
}

// RemoveWriterIDs removes the "writers" edge to Artist entities by IDs.
func (mu *MovieUpdate) RemoveWriterIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveWriterIDs(ids...)
	return mu
}

// RemoveWriters removes "writers" edges to Artist entities.
func (mu *MovieUpdate) RemoveWriters(a ...*Artist) *MovieUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveWriterIDs(ids...)
}

// ClearGenres clears all "genres" edges to the MovieGenre entity.
func (mu *MovieUpdate) ClearGenres() *MovieUpdate {
	mu.mutation.ClearGenres()
	return mu
}

// RemoveGenreIDs removes the "genres" edge to MovieGenre entities by IDs.
func (mu *MovieUpdate) RemoveGenreIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveGenreIDs(ids...)
	return mu
}

// RemoveGenres removes "genres" edges to MovieGenre entities.
func (mu *MovieUpdate) RemoveGenres(m ...*MovieGenre) *MovieUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveGenreIDs(ids...)
}

// ClearCountries clears all "countries" edges to the Country entity.
func (mu *MovieUpdate) ClearCountries() *MovieUpdate {
	mu.mutation.ClearCountries()
	return mu
}

// RemoveCountryIDs removes the "countries" edge to Country entities by IDs.
func (mu *MovieUpdate) RemoveCountryIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveCountryIDs(ids...)
	return mu
}

// RemoveCountries removes "countries" edges to Country entities.
func (mu *MovieUpdate) RemoveCountries(c ...*Country) *MovieUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveCountryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MovieUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovieMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MovieUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MovieUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MovieUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MovieUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   movie.Table,
			Columns: movie.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: movie.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldTitle,
		})
	}
	if value, ok := mu.mutation.OriginalTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldOriginalTitle,
		})
	}
	if mu.mutation.OriginalTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: movie.FieldOriginalTitle,
		})
	}
	if value, ok := mu.mutation.Languages(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: movie.FieldLanguages,
		})
	}
	if mu.mutation.LanguagesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: movie.FieldLanguages,
		})
	}
	if value, ok := mu.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldReleaseDate,
		})
	}
	if mu.mutation.ReleaseDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: movie.FieldReleaseDate,
		})
	}
	if value, ok := mu.mutation.Plot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldPlot,
		})
	}
	if mu.mutation.PlotCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: movie.FieldPlot,
		})
	}
	if value, ok := mu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldDuration,
		})
	}
	if value, ok := mu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldDuration,
		})
	}
	if mu.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: movie.FieldDuration,
		})
	}
	if value, ok := mu.mutation.Watched(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: movie.FieldWatched,
		})
	}
	if mu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.RatingsTable,
			Columns: []string{movie.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rating.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !mu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.RatingsTable,
			Columns: []string{movie.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rating.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.RatingsTable,
			Columns: []string{movie.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rating.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.PosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   movie.PosterTable,
			Columns: []string{movie.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   movie.PosterTable,
			Columns: []string{movie.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.FanartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.FanartTable,
			Columns: []string{movie.FanartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedFanartIDs(); len(nodes) > 0 && !mu.mutation.FanartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.FanartTable,
			Columns: []string{movie.FanartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.FanartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.FanartTable,
			Columns: []string{movie.FanartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CastCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.CastTable,
			Columns: movie.CastPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCastIDs(); len(nodes) > 0 && !mu.mutation.CastCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.CastTable,
			Columns: movie.CastPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CastIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.CastTable,
			Columns: movie.CastPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.DirectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.DirectorsTable,
			Columns: movie.DirectorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedDirectorsIDs(); len(nodes) > 0 && !mu.mutation.DirectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.DirectorsTable,
			Columns: movie.DirectorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.DirectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.DirectorsTable,
			Columns: movie.DirectorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.WritersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.WritersTable,
			Columns: movie.WritersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedWritersIDs(); len(nodes) > 0 && !mu.mutation.WritersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.WritersTable,
			Columns: movie.WritersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.WritersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.WritersTable,
			Columns: movie.WritersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moviegenre.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedGenresIDs(); len(nodes) > 0 && !mu.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moviegenre.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moviegenre.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.CountriesTable,
			Columns: movie.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCountriesIDs(); len(nodes) > 0 && !mu.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.CountriesTable,
			Columns: movie.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CountriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.CountriesTable,
			Columns: movie.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MovieUpdateOne is the builder for updating a single Movie entity.
type MovieUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovieMutation
}

// SetTitle sets the "title" field.
func (muo *MovieUpdateOne) SetTitle(s string) *MovieUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetOriginalTitle sets the "original_title" field.
func (muo *MovieUpdateOne) SetOriginalTitle(s string) *MovieUpdateOne {
	muo.mutation.SetOriginalTitle(s)
	return muo
}

// SetNillableOriginalTitle sets the "original_title" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableOriginalTitle(s *string) *MovieUpdateOne {
	if s != nil {
		muo.SetOriginalTitle(*s)
	}
	return muo
}

// ClearOriginalTitle clears the value of the "original_title" field.
func (muo *MovieUpdateOne) ClearOriginalTitle() *MovieUpdateOne {
	muo.mutation.ClearOriginalTitle()
	return muo
}

// SetLanguages sets the "languages" field.
func (muo *MovieUpdateOne) SetLanguages(s []string) *MovieUpdateOne {
	muo.mutation.SetLanguages(s)
	return muo
}

// ClearLanguages clears the value of the "languages" field.
func (muo *MovieUpdateOne) ClearLanguages() *MovieUpdateOne {
	muo.mutation.ClearLanguages()
	return muo
}

// SetReleaseDate sets the "release_date" field.
func (muo *MovieUpdateOne) SetReleaseDate(t time.Time) *MovieUpdateOne {
	muo.mutation.SetReleaseDate(t)
	return muo
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableReleaseDate(t *time.Time) *MovieUpdateOne {
	if t != nil {
		muo.SetReleaseDate(*t)
	}
	return muo
}

// ClearReleaseDate clears the value of the "release_date" field.
func (muo *MovieUpdateOne) ClearReleaseDate() *MovieUpdateOne {
	muo.mutation.ClearReleaseDate()
	return muo
}

// SetPlot sets the "plot" field.
func (muo *MovieUpdateOne) SetPlot(s string) *MovieUpdateOne {
	muo.mutation.SetPlot(s)
	return muo
}

// SetNillablePlot sets the "plot" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillablePlot(s *string) *MovieUpdateOne {
	if s != nil {
		muo.SetPlot(*s)
	}
	return muo
}

// ClearPlot clears the value of the "plot" field.
func (muo *MovieUpdateOne) ClearPlot() *MovieUpdateOne {
	muo.mutation.ClearPlot()
	return muo
}

// SetDuration sets the "duration" field.
func (muo *MovieUpdateOne) SetDuration(i int) *MovieUpdateOne {
	muo.mutation.ResetDuration()
	muo.mutation.SetDuration(i)
	return muo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableDuration(i *int) *MovieUpdateOne {
	if i != nil {
		muo.SetDuration(*i)
	}
	return muo
}

// AddDuration adds i to the "duration" field.
func (muo *MovieUpdateOne) AddDuration(i int) *MovieUpdateOne {
	muo.mutation.AddDuration(i)
	return muo
}

// ClearDuration clears the value of the "duration" field.
func (muo *MovieUpdateOne) ClearDuration() *MovieUpdateOne {
	muo.mutation.ClearDuration()
	return muo
}

// SetWatched sets the "watched" field.
func (muo *MovieUpdateOne) SetWatched(b bool) *MovieUpdateOne {
	muo.mutation.SetWatched(b)
	return muo
}

// SetNillableWatched sets the "watched" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableWatched(b *bool) *MovieUpdateOne {
	if b != nil {
		muo.SetWatched(*b)
	}
	return muo
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by IDs.
func (muo *MovieUpdateOne) AddRatingIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddRatingIDs(ids...)
	return muo
}

// AddRatings adds the "ratings" edges to the Rating entity.
func (muo *MovieUpdateOne) AddRatings(r ...*Rating) *MovieUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddRatingIDs(ids...)
}

// SetPosterID sets the "poster" edge to the Picture entity by ID.
func (muo *MovieUpdateOne) SetPosterID(id int) *MovieUpdateOne {
	muo.mutation.SetPosterID(id)
	return muo
}

// SetNillablePosterID sets the "poster" edge to the Picture entity by ID if the given value is not nil.
func (muo *MovieUpdateOne) SetNillablePosterID(id *int) *MovieUpdateOne {
	if id != nil {
		muo = muo.SetPosterID(*id)
	}
	return muo
}

// SetPoster sets the "poster" edge to the Picture entity.
func (muo *MovieUpdateOne) SetPoster(p *Picture) *MovieUpdateOne {
	return muo.SetPosterID(p.ID)
}

// AddFanartIDs adds the "fanart" edge to the Picture entity by IDs.
func (muo *MovieUpdateOne) AddFanartIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddFanartIDs(ids...)
	return muo
}

// AddFanart adds the "fanart" edges to the Picture entity.
func (muo *MovieUpdateOne) AddFanart(p ...*Picture) *MovieUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddFanartIDs(ids...)
}

// AddCastIDs adds the "cast" edge to the Artist entity by IDs.
func (muo *MovieUpdateOne) AddCastIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddCastIDs(ids...)
	return muo
}

// AddCast adds the "cast" edges to the Artist entity.
func (muo *MovieUpdateOne) AddCast(a ...*Artist) *MovieUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddCastIDs(ids...)
}

// AddDirectorIDs adds the "directors" edge to the Artist entity by IDs.
func (muo *MovieUpdateOne) AddDirectorIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddDirectorIDs(ids...)
	return muo
}

// AddDirectors adds the "directors" edges to the Artist entity.
func (muo *MovieUpdateOne) AddDirectors(a ...*Artist) *MovieUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddDirectorIDs(ids...)
}

// AddWriterIDs adds the "writers" edge to the Artist entity by IDs.
func (muo *MovieUpdateOne) AddWriterIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddWriterIDs(ids...)
	return muo
}

// AddWriters adds the "writers" edges to the Artist entity.
func (muo *MovieUpdateOne) AddWriters(a ...*Artist) *MovieUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddWriterIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the MovieGenre entity by IDs.
func (muo *MovieUpdateOne) AddGenreIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddGenreIDs(ids...)
	return muo
}

// AddGenres adds the "genres" edges to the MovieGenre entity.
func (muo *MovieUpdateOne) AddGenres(m ...*MovieGenre) *MovieUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddGenreIDs(ids...)
}

// AddCountryIDs adds the "countries" edge to the Country entity by IDs.
func (muo *MovieUpdateOne) AddCountryIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddCountryIDs(ids...)
	return muo
}

// AddCountries adds the "countries" edges to the Country entity.
func (muo *MovieUpdateOne) AddCountries(c ...*Country) *MovieUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddCountryIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (muo *MovieUpdateOne) Mutation() *MovieMutation {
	return muo.mutation
}

// ClearRatings clears all "ratings" edges to the Rating entity.
func (muo *MovieUpdateOne) ClearRatings() *MovieUpdateOne {
	muo.mutation.ClearRatings()
	return muo
}

// RemoveRatingIDs removes the "ratings" edge to Rating entities by IDs.
func (muo *MovieUpdateOne) RemoveRatingIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveRatingIDs(ids...)
	return muo
}

// RemoveRatings removes "ratings" edges to Rating entities.
func (muo *MovieUpdateOne) RemoveRatings(r ...*Rating) *MovieUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveRatingIDs(ids...)
}

// ClearPoster clears the "poster" edge to the Picture entity.
func (muo *MovieUpdateOne) ClearPoster() *MovieUpdateOne {
	muo.mutation.ClearPoster()
	return muo
}

// ClearFanart clears all "fanart" edges to the Picture entity.
func (muo *MovieUpdateOne) ClearFanart() *MovieUpdateOne {
	muo.mutation.ClearFanart()
	return muo
}

// RemoveFanartIDs removes the "fanart" edge to Picture entities by IDs.
func (muo *MovieUpdateOne) RemoveFanartIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveFanartIDs(ids...)
	return muo
}

// RemoveFanart removes "fanart" edges to Picture entities.
func (muo *MovieUpdateOne) RemoveFanart(p ...*Picture) *MovieUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemoveFanartIDs(ids...)
}

// ClearCast clears all "cast" edges to the Artist entity.
func (muo *MovieUpdateOne) ClearCast() *MovieUpdateOne {
	muo.mutation.ClearCast()
	return muo
}

// RemoveCastIDs removes the "cast" edge to Artist entities by IDs.
func (muo *MovieUpdateOne) RemoveCastIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveCastIDs(ids...)
	return muo
}

// RemoveCast removes "cast" edges to Artist entities.
func (muo *MovieUpdateOne) RemoveCast(a ...*Artist) *MovieUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveCastIDs(ids...)
}

// ClearDirectors clears all "directors" edges to the Artist entity.
func (muo *MovieUpdateOne) ClearDirectors() *MovieUpdateOne {
	muo.mutation.ClearDirectors()
	return muo
}

// RemoveDirectorIDs removes the "directors" edge to Artist entities by IDs.
func (muo *MovieUpdateOne) RemoveDirectorIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveDirectorIDs(ids...)
	return muo
}

// RemoveDirectors removes "directors" edges to Artist entities.
func (muo *MovieUpdateOne) RemoveDirectors(a ...*Artist) *MovieUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveDirectorIDs(ids...)
}

// ClearWriters clears all "writers" edges to the Artist entity.
func (muo *MovieUpdateOne) ClearWriters() *MovieUpdateOne {
	muo.mutation.ClearWriters()
	return muo
}

// RemoveWriterIDs removes the "writers" edge to Artist entities by IDs.
func (muo *MovieUpdateOne) RemoveWriterIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveWriterIDs(ids...)
	return muo
}

// RemoveWriters removes "writers" edges to Artist entities.
func (muo *MovieUpdateOne) RemoveWriters(a ...*Artist) *MovieUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveWriterIDs(ids...)
}

// ClearGenres clears all "genres" edges to the MovieGenre entity.
func (muo *MovieUpdateOne) ClearGenres() *MovieUpdateOne {
	muo.mutation.ClearGenres()
	return muo
}

// RemoveGenreIDs removes the "genres" edge to MovieGenre entities by IDs.
func (muo *MovieUpdateOne) RemoveGenreIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveGenreIDs(ids...)
	return muo
}

// RemoveGenres removes "genres" edges to MovieGenre entities.
func (muo *MovieUpdateOne) RemoveGenres(m ...*MovieGenre) *MovieUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveGenreIDs(ids...)
}

// ClearCountries clears all "countries" edges to the Country entity.
func (muo *MovieUpdateOne) ClearCountries() *MovieUpdateOne {
	muo.mutation.ClearCountries()
	return muo
}

// RemoveCountryIDs removes the "countries" edge to Country entities by IDs.
func (muo *MovieUpdateOne) RemoveCountryIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveCountryIDs(ids...)
	return muo
}

// RemoveCountries removes "countries" edges to Country entities.
func (muo *MovieUpdateOne) RemoveCountries(c ...*Country) *MovieUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveCountryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MovieUpdateOne) Select(field string, fields ...string) *MovieUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Movie entity.
func (muo *MovieUpdateOne) Save(ctx context.Context) (*Movie, error) {
	var (
		err  error
		node *Movie
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovieMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MovieUpdateOne) SaveX(ctx context.Context) *Movie {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MovieUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MovieUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MovieUpdateOne) sqlSave(ctx context.Context) (_node *Movie, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   movie.Table,
			Columns: movie.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: movie.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Movie.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, movie.FieldID)
		for _, f := range fields {
			if !movie.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != movie.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldTitle,
		})
	}
	if value, ok := muo.mutation.OriginalTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldOriginalTitle,
		})
	}
	if muo.mutation.OriginalTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: movie.FieldOriginalTitle,
		})
	}
	if value, ok := muo.mutation.Languages(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: movie.FieldLanguages,
		})
	}
	if muo.mutation.LanguagesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: movie.FieldLanguages,
		})
	}
	if value, ok := muo.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldReleaseDate,
		})
	}
	if muo.mutation.ReleaseDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: movie.FieldReleaseDate,
		})
	}
	if value, ok := muo.mutation.Plot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldPlot,
		})
	}
	if muo.mutation.PlotCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: movie.FieldPlot,
		})
	}
	if value, ok := muo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldDuration,
		})
	}
	if value, ok := muo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldDuration,
		})
	}
	if muo.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: movie.FieldDuration,
		})
	}
	if value, ok := muo.mutation.Watched(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: movie.FieldWatched,
		})
	}
	if muo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.RatingsTable,
			Columns: []string{movie.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rating.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !muo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.RatingsTable,
			Columns: []string{movie.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rating.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.RatingsTable,
			Columns: []string{movie.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rating.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.PosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   movie.PosterTable,
			Columns: []string{movie.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   movie.PosterTable,
			Columns: []string{movie.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.FanartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.FanartTable,
			Columns: []string{movie.FanartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedFanartIDs(); len(nodes) > 0 && !muo.mutation.FanartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.FanartTable,
			Columns: []string{movie.FanartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.FanartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.FanartTable,
			Columns: []string{movie.FanartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CastCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.CastTable,
			Columns: movie.CastPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCastIDs(); len(nodes) > 0 && !muo.mutation.CastCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.CastTable,
			Columns: movie.CastPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CastIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.CastTable,
			Columns: movie.CastPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.DirectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.DirectorsTable,
			Columns: movie.DirectorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedDirectorsIDs(); len(nodes) > 0 && !muo.mutation.DirectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.DirectorsTable,
			Columns: movie.DirectorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.DirectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.DirectorsTable,
			Columns: movie.DirectorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.WritersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.WritersTable,
			Columns: movie.WritersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedWritersIDs(); len(nodes) > 0 && !muo.mutation.WritersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.WritersTable,
			Columns: movie.WritersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.WritersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.WritersTable,
			Columns: movie.WritersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moviegenre.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedGenresIDs(); len(nodes) > 0 && !muo.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moviegenre.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moviegenre.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.CountriesTable,
			Columns: movie.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCountriesIDs(); len(nodes) > 0 && !muo.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.CountriesTable,
			Columns: movie.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CountriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.CountriesTable,
			Columns: movie.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Movie{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
