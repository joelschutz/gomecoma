// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/joelschutz/gomecoma/src/ent/artist"
	"github.com/joelschutz/gomecoma/src/ent/country"
	"github.com/joelschutz/gomecoma/src/ent/movie"
	"github.com/joelschutz/gomecoma/src/ent/picture"
	"github.com/joelschutz/gomecoma/src/ent/predicate"
)

// ArtistQuery is the builder for querying Artist entities.
type ArtistQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Artist
	// eager-loading edges.
	withProfilePicture *PictureQuery
	withPictures       *PictureQuery
	withDirected       *MovieQuery
	withActed          *MovieQuery
	withWrote          *MovieQuery
	withCountries      *CountryQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ArtistQuery builder.
func (aq *ArtistQuery) Where(ps ...predicate.Artist) *ArtistQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit adds a limit step to the query.
func (aq *ArtistQuery) Limit(limit int) *ArtistQuery {
	aq.limit = &limit
	return aq
}

// Offset adds an offset step to the query.
func (aq *ArtistQuery) Offset(offset int) *ArtistQuery {
	aq.offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *ArtistQuery) Unique(unique bool) *ArtistQuery {
	aq.unique = &unique
	return aq
}

// Order adds an order step to the query.
func (aq *ArtistQuery) Order(o ...OrderFunc) *ArtistQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryProfilePicture chains the current query on the "profile_picture" edge.
func (aq *ArtistQuery) QueryProfilePicture() *PictureQuery {
	query := &PictureQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, selector),
			sqlgraph.To(picture.Table, picture.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, artist.ProfilePictureTable, artist.ProfilePictureColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPictures chains the current query on the "pictures" edge.
func (aq *ArtistQuery) QueryPictures() *PictureQuery {
	query := &PictureQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, selector),
			sqlgraph.To(picture.Table, picture.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, artist.PicturesTable, artist.PicturesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDirected chains the current query on the "directed" edge.
func (aq *ArtistQuery) QueryDirected() *MovieQuery {
	query := &MovieQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, selector),
			sqlgraph.To(movie.Table, movie.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artist.DirectedTable, artist.DirectedPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActed chains the current query on the "acted" edge.
func (aq *ArtistQuery) QueryActed() *MovieQuery {
	query := &MovieQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, selector),
			sqlgraph.To(movie.Table, movie.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artist.ActedTable, artist.ActedPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWrote chains the current query on the "wrote" edge.
func (aq *ArtistQuery) QueryWrote() *MovieQuery {
	query := &MovieQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, selector),
			sqlgraph.To(movie.Table, movie.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artist.WroteTable, artist.WrotePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountries chains the current query on the "countries" edge.
func (aq *ArtistQuery) QueryCountries() *CountryQuery {
	query := &CountryQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, artist.CountriesTable, artist.CountriesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Artist entity from the query.
// Returns a *NotFoundError when no Artist was found.
func (aq *ArtistQuery) First(ctx context.Context) (*Artist, error) {
	nodes, err := aq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{artist.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *ArtistQuery) FirstX(ctx context.Context) *Artist {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Artist ID from the query.
// Returns a *NotFoundError when no Artist ID was found.
func (aq *ArtistQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{artist.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *ArtistQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Artist entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Artist entity is found.
// Returns a *NotFoundError when no Artist entities are found.
func (aq *ArtistQuery) Only(ctx context.Context) (*Artist, error) {
	nodes, err := aq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{artist.Label}
	default:
		return nil, &NotSingularError{artist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *ArtistQuery) OnlyX(ctx context.Context) *Artist {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Artist ID in the query.
// Returns a *NotSingularError when more than one Artist ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *ArtistQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{artist.Label}
	default:
		err = &NotSingularError{artist.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *ArtistQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Artists.
func (aq *ArtistQuery) All(ctx context.Context) ([]*Artist, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aq *ArtistQuery) AllX(ctx context.Context) []*Artist {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Artist IDs.
func (aq *ArtistQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aq.Select(artist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *ArtistQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *ArtistQuery) Count(ctx context.Context) (int, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aq *ArtistQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *ArtistQuery) Exist(ctx context.Context) (bool, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *ArtistQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ArtistQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *ArtistQuery) Clone() *ArtistQuery {
	if aq == nil {
		return nil
	}
	return &ArtistQuery{
		config:             aq.config,
		limit:              aq.limit,
		offset:             aq.offset,
		order:              append([]OrderFunc{}, aq.order...),
		predicates:         append([]predicate.Artist{}, aq.predicates...),
		withProfilePicture: aq.withProfilePicture.Clone(),
		withPictures:       aq.withPictures.Clone(),
		withDirected:       aq.withDirected.Clone(),
		withActed:          aq.withActed.Clone(),
		withWrote:          aq.withWrote.Clone(),
		withCountries:      aq.withCountries.Clone(),
		// clone intermediate query.
		sql:    aq.sql.Clone(),
		path:   aq.path,
		unique: aq.unique,
	}
}

// WithProfilePicture tells the query-builder to eager-load the nodes that are connected to
// the "profile_picture" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithProfilePicture(opts ...func(*PictureQuery)) *ArtistQuery {
	query := &PictureQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withProfilePicture = query
	return aq
}

// WithPictures tells the query-builder to eager-load the nodes that are connected to
// the "pictures" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithPictures(opts ...func(*PictureQuery)) *ArtistQuery {
	query := &PictureQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withPictures = query
	return aq
}

// WithDirected tells the query-builder to eager-load the nodes that are connected to
// the "directed" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithDirected(opts ...func(*MovieQuery)) *ArtistQuery {
	query := &MovieQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withDirected = query
	return aq
}

// WithActed tells the query-builder to eager-load the nodes that are connected to
// the "acted" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithActed(opts ...func(*MovieQuery)) *ArtistQuery {
	query := &MovieQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withActed = query
	return aq
}

// WithWrote tells the query-builder to eager-load the nodes that are connected to
// the "wrote" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithWrote(opts ...func(*MovieQuery)) *ArtistQuery {
	query := &MovieQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withWrote = query
	return aq
}

// WithCountries tells the query-builder to eager-load the nodes that are connected to
// the "countries" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithCountries(opts ...func(*CountryQuery)) *ArtistQuery {
	query := &CountryQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withCountries = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Artist.Query().
//		GroupBy(artist.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aq *ArtistQuery) GroupBy(field string, fields ...string) *ArtistGroupBy {
	grbuild := &ArtistGroupBy{config: aq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aq.sqlQuery(ctx), nil
	}
	grbuild.label = artist.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Artist.Query().
//		Select(artist.FieldName).
//		Scan(ctx, &v)
//
func (aq *ArtistQuery) Select(fields ...string) *ArtistSelect {
	aq.fields = append(aq.fields, fields...)
	selbuild := &ArtistSelect{ArtistQuery: aq}
	selbuild.label = artist.Label
	selbuild.flds, selbuild.scan = &aq.fields, selbuild.Scan
	return selbuild
}

func (aq *ArtistQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aq.fields {
		if !artist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *ArtistQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Artist, error) {
	var (
		nodes       = []*Artist{}
		withFKs     = aq.withFKs
		_spec       = aq.querySpec()
		loadedTypes = [6]bool{
			aq.withProfilePicture != nil,
			aq.withPictures != nil,
			aq.withDirected != nil,
			aq.withActed != nil,
			aq.withWrote != nil,
			aq.withCountries != nil,
		}
	)
	if aq.withProfilePicture != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, artist.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Artist).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Artist{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := aq.withProfilePicture; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Artist)
		for i := range nodes {
			if nodes[i].artist_profile_picture == nil {
				continue
			}
			fk := *nodes[i].artist_profile_picture
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(picture.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "artist_profile_picture" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProfilePicture = n
			}
		}
	}

	if query := aq.withPictures; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Artist)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Pictures = []*Picture{}
		}
		query.withFKs = true
		query.Where(predicate.Picture(func(s *sql.Selector) {
			s.Where(sql.InValues(artist.PicturesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.artist_pictures
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "artist_pictures" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "artist_pictures" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Pictures = append(node.Edges.Pictures, n)
		}
	}

	if query := aq.withDirected; query != nil {
		edgeids := make([]driver.Value, len(nodes))
		byid := make(map[int]*Artist)
		nids := make(map[int]map[*Artist]struct{})
		for i, node := range nodes {
			edgeids[i] = node.ID
			byid[node.ID] = node
			node.Edges.Directed = []*Movie{}
		}
		query.Where(func(s *sql.Selector) {
			joinT := sql.Table(artist.DirectedTable)
			s.Join(joinT).On(s.C(movie.FieldID), joinT.C(artist.DirectedPrimaryKey[0]))
			s.Where(sql.InValues(joinT.C(artist.DirectedPrimaryKey[1]), edgeids...))
			columns := s.SelectedColumns()
			s.Select(joinT.C(artist.DirectedPrimaryKey[1]))
			s.AppendSelect(columns...)
			s.SetDistinct(false)
		})
		neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]interface{}, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]interface{}{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []interface{}) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artist]struct{}{byid[outValue]: struct{}{}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byid[outValue]] = struct{}{}
				return nil
			}
		})
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "directed" node returned %v`, n.ID)
			}
			for kn := range nodes {
				kn.Edges.Directed = append(kn.Edges.Directed, n)
			}
		}
	}

	if query := aq.withActed; query != nil {
		edgeids := make([]driver.Value, len(nodes))
		byid := make(map[int]*Artist)
		nids := make(map[int]map[*Artist]struct{})
		for i, node := range nodes {
			edgeids[i] = node.ID
			byid[node.ID] = node
			node.Edges.Acted = []*Movie{}
		}
		query.Where(func(s *sql.Selector) {
			joinT := sql.Table(artist.ActedTable)
			s.Join(joinT).On(s.C(movie.FieldID), joinT.C(artist.ActedPrimaryKey[0]))
			s.Where(sql.InValues(joinT.C(artist.ActedPrimaryKey[1]), edgeids...))
			columns := s.SelectedColumns()
			s.Select(joinT.C(artist.ActedPrimaryKey[1]))
			s.AppendSelect(columns...)
			s.SetDistinct(false)
		})
		neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]interface{}, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]interface{}{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []interface{}) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artist]struct{}{byid[outValue]: struct{}{}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byid[outValue]] = struct{}{}
				return nil
			}
		})
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "acted" node returned %v`, n.ID)
			}
			for kn := range nodes {
				kn.Edges.Acted = append(kn.Edges.Acted, n)
			}
		}
	}

	if query := aq.withWrote; query != nil {
		edgeids := make([]driver.Value, len(nodes))
		byid := make(map[int]*Artist)
		nids := make(map[int]map[*Artist]struct{})
		for i, node := range nodes {
			edgeids[i] = node.ID
			byid[node.ID] = node
			node.Edges.Wrote = []*Movie{}
		}
		query.Where(func(s *sql.Selector) {
			joinT := sql.Table(artist.WroteTable)
			s.Join(joinT).On(s.C(movie.FieldID), joinT.C(artist.WrotePrimaryKey[0]))
			s.Where(sql.InValues(joinT.C(artist.WrotePrimaryKey[1]), edgeids...))
			columns := s.SelectedColumns()
			s.Select(joinT.C(artist.WrotePrimaryKey[1]))
			s.AppendSelect(columns...)
			s.SetDistinct(false)
		})
		neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]interface{}, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]interface{}{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []interface{}) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artist]struct{}{byid[outValue]: struct{}{}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byid[outValue]] = struct{}{}
				return nil
			}
		})
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "wrote" node returned %v`, n.ID)
			}
			for kn := range nodes {
				kn.Edges.Wrote = append(kn.Edges.Wrote, n)
			}
		}
	}

	if query := aq.withCountries; query != nil {
		edgeids := make([]driver.Value, len(nodes))
		byid := make(map[int]*Artist)
		nids := make(map[int]map[*Artist]struct{})
		for i, node := range nodes {
			edgeids[i] = node.ID
			byid[node.ID] = node
			node.Edges.Countries = []*Country{}
		}
		query.Where(func(s *sql.Selector) {
			joinT := sql.Table(artist.CountriesTable)
			s.Join(joinT).On(s.C(country.FieldID), joinT.C(artist.CountriesPrimaryKey[0]))
			s.Where(sql.InValues(joinT.C(artist.CountriesPrimaryKey[1]), edgeids...))
			columns := s.SelectedColumns()
			s.Select(joinT.C(artist.CountriesPrimaryKey[1]))
			s.AppendSelect(columns...)
			s.SetDistinct(false)
		})
		neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]interface{}, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]interface{}{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []interface{}) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artist]struct{}{byid[outValue]: struct{}{}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byid[outValue]] = struct{}{}
				return nil
			}
		})
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "countries" node returned %v`, n.ID)
			}
			for kn := range nodes {
				kn.Edges.Countries = append(kn.Edges.Countries, n)
			}
		}
	}

	return nodes, nil
}

func (aq *ArtistQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	_spec.Node.Columns = aq.fields
	if len(aq.fields) > 0 {
		_spec.Unique = aq.unique != nil && *aq.unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *ArtistQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (aq *ArtistQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artist.Table,
			Columns: artist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: artist.FieldID,
			},
		},
		From:   aq.sql,
		Unique: true,
	}
	if unique := aq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artist.FieldID)
		for i := range fields {
			if fields[i] != artist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *ArtistQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(artist.Table)
	columns := aq.fields
	if len(columns) == 0 {
		columns = artist.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.unique != nil && *aq.unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ArtistGroupBy is the group-by builder for Artist entities.
type ArtistGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *ArtistGroupBy) Aggregate(fns ...AggregateFunc) *ArtistGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the group-by query and scans the result into the given value.
func (agb *ArtistGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := agb.path(ctx)
	if err != nil {
		return err
	}
	agb.sql = query
	return agb.sqlScan(ctx, v)
}

func (agb *ArtistGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range agb.fields {
		if !artist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := agb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (agb *ArtistGroupBy) sqlQuery() *sql.Selector {
	selector := agb.sql.Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(agb.fields)+len(agb.fns))
		for _, f := range agb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(agb.fields...)...)
}

// ArtistSelect is the builder for selecting fields of Artist entities.
type ArtistSelect struct {
	*ArtistQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (as *ArtistSelect) Scan(ctx context.Context, v interface{}) error {
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	as.sql = as.ArtistQuery.sqlQuery(ctx)
	return as.sqlScan(ctx, v)
}

func (as *ArtistSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := as.sql.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
