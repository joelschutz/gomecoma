// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/joelschutz/gomecoma/src/ent/artist"
	"github.com/joelschutz/gomecoma/src/ent/country"
	"github.com/joelschutz/gomecoma/src/ent/file"
	"github.com/joelschutz/gomecoma/src/ent/movie"
	"github.com/joelschutz/gomecoma/src/ent/moviegenre"
	"github.com/joelschutz/gomecoma/src/ent/picture"
	"github.com/joelschutz/gomecoma/src/ent/rating"
)

// MovieCreate is the builder for creating a Movie entity.
type MovieCreate struct {
	config
	mutation *MovieMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (mc *MovieCreate) SetTitle(s string) *MovieCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetOriginalTitle sets the "original_title" field.
func (mc *MovieCreate) SetOriginalTitle(s string) *MovieCreate {
	mc.mutation.SetOriginalTitle(s)
	return mc
}

// SetNillableOriginalTitle sets the "original_title" field if the given value is not nil.
func (mc *MovieCreate) SetNillableOriginalTitle(s *string) *MovieCreate {
	if s != nil {
		mc.SetOriginalTitle(*s)
	}
	return mc
}

// SetReleaseDate sets the "release_date" field.
func (mc *MovieCreate) SetReleaseDate(t time.Time) *MovieCreate {
	mc.mutation.SetReleaseDate(t)
	return mc
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (mc *MovieCreate) SetNillableReleaseDate(t *time.Time) *MovieCreate {
	if t != nil {
		mc.SetReleaseDate(*t)
	}
	return mc
}

// SetPlot sets the "plot" field.
func (mc *MovieCreate) SetPlot(s string) *MovieCreate {
	mc.mutation.SetPlot(s)
	return mc
}

// SetNillablePlot sets the "plot" field if the given value is not nil.
func (mc *MovieCreate) SetNillablePlot(s *string) *MovieCreate {
	if s != nil {
		mc.SetPlot(*s)
	}
	return mc
}

// SetDuration sets the "duration" field.
func (mc *MovieCreate) SetDuration(i int) *MovieCreate {
	mc.mutation.SetDuration(i)
	return mc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mc *MovieCreate) SetNillableDuration(i *int) *MovieCreate {
	if i != nil {
		mc.SetDuration(*i)
	}
	return mc
}

// SetWatched sets the "watched" field.
func (mc *MovieCreate) SetWatched(b bool) *MovieCreate {
	mc.mutation.SetWatched(b)
	return mc
}

// SetNillableWatched sets the "watched" field if the given value is not nil.
func (mc *MovieCreate) SetNillableWatched(b *bool) *MovieCreate {
	if b != nil {
		mc.SetWatched(*b)
	}
	return mc
}

// SetFileID sets the "file" edge to the File entity by ID.
func (mc *MovieCreate) SetFileID(id int) *MovieCreate {
	mc.mutation.SetFileID(id)
	return mc
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (mc *MovieCreate) SetNillableFileID(id *int) *MovieCreate {
	if id != nil {
		mc = mc.SetFileID(*id)
	}
	return mc
}

// SetFile sets the "file" edge to the File entity.
func (mc *MovieCreate) SetFile(f *File) *MovieCreate {
	return mc.SetFileID(f.ID)
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by IDs.
func (mc *MovieCreate) AddRatingIDs(ids ...int) *MovieCreate {
	mc.mutation.AddRatingIDs(ids...)
	return mc
}

// AddRatings adds the "ratings" edges to the Rating entity.
func (mc *MovieCreate) AddRatings(r ...*Rating) *MovieCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mc.AddRatingIDs(ids...)
}

// SetPosterID sets the "poster" edge to the Picture entity by ID.
func (mc *MovieCreate) SetPosterID(id int) *MovieCreate {
	mc.mutation.SetPosterID(id)
	return mc
}

// SetNillablePosterID sets the "poster" edge to the Picture entity by ID if the given value is not nil.
func (mc *MovieCreate) SetNillablePosterID(id *int) *MovieCreate {
	if id != nil {
		mc = mc.SetPosterID(*id)
	}
	return mc
}

// SetPoster sets the "poster" edge to the Picture entity.
func (mc *MovieCreate) SetPoster(p *Picture) *MovieCreate {
	return mc.SetPosterID(p.ID)
}

// AddFanartIDs adds the "fanart" edge to the Picture entity by IDs.
func (mc *MovieCreate) AddFanartIDs(ids ...int) *MovieCreate {
	mc.mutation.AddFanartIDs(ids...)
	return mc
}

// AddFanart adds the "fanart" edges to the Picture entity.
func (mc *MovieCreate) AddFanart(p ...*Picture) *MovieCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddFanartIDs(ids...)
}

// AddCastIDs adds the "cast" edge to the Artist entity by IDs.
func (mc *MovieCreate) AddCastIDs(ids ...int) *MovieCreate {
	mc.mutation.AddCastIDs(ids...)
	return mc
}

// AddCast adds the "cast" edges to the Artist entity.
func (mc *MovieCreate) AddCast(a ...*Artist) *MovieCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mc.AddCastIDs(ids...)
}

// AddDirectorIDs adds the "directors" edge to the Artist entity by IDs.
func (mc *MovieCreate) AddDirectorIDs(ids ...int) *MovieCreate {
	mc.mutation.AddDirectorIDs(ids...)
	return mc
}

// AddDirectors adds the "directors" edges to the Artist entity.
func (mc *MovieCreate) AddDirectors(a ...*Artist) *MovieCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mc.AddDirectorIDs(ids...)
}

// AddWriterIDs adds the "writers" edge to the Artist entity by IDs.
func (mc *MovieCreate) AddWriterIDs(ids ...int) *MovieCreate {
	mc.mutation.AddWriterIDs(ids...)
	return mc
}

// AddWriters adds the "writers" edges to the Artist entity.
func (mc *MovieCreate) AddWriters(a ...*Artist) *MovieCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mc.AddWriterIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the MovieGenre entity by IDs.
func (mc *MovieCreate) AddGenreIDs(ids ...int) *MovieCreate {
	mc.mutation.AddGenreIDs(ids...)
	return mc
}

// AddGenres adds the "genres" edges to the MovieGenre entity.
func (mc *MovieCreate) AddGenres(m ...*MovieGenre) *MovieCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddGenreIDs(ids...)
}

// AddCountryIDs adds the "countries" edge to the Country entity by IDs.
func (mc *MovieCreate) AddCountryIDs(ids ...int) *MovieCreate {
	mc.mutation.AddCountryIDs(ids...)
	return mc
}

// AddCountries adds the "countries" edges to the Country entity.
func (mc *MovieCreate) AddCountries(c ...*Country) *MovieCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddCountryIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (mc *MovieCreate) Mutation() *MovieMutation {
	return mc.mutation
}

// Save creates the Movie in the database.
func (mc *MovieCreate) Save(ctx context.Context) (*Movie, error) {
	var (
		err  error
		node *Movie
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovieMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MovieCreate) SaveX(ctx context.Context) *Movie {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MovieCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MovieCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MovieCreate) defaults() {
	if _, ok := mc.mutation.Watched(); !ok {
		v := movie.DefaultWatched
		mc.mutation.SetWatched(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MovieCreate) check() error {
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Movie.title"`)}
	}
	if _, ok := mc.mutation.Watched(); !ok {
		return &ValidationError{Name: "watched", err: errors.New(`ent: missing required field "Movie.watched"`)}
	}
	return nil
}

func (mc *MovieCreate) sqlSave(ctx context.Context) (*Movie, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MovieCreate) createSpec() (*Movie, *sqlgraph.CreateSpec) {
	var (
		_node = &Movie{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: movie.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: movie.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := mc.mutation.OriginalTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldOriginalTitle,
		})
		_node.OriginalTitle = value
	}
	if value, ok := mc.mutation.ReleaseDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldReleaseDate,
		})
		_node.ReleaseDate = value
	}
	if value, ok := mc.mutation.Plot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldPlot,
		})
		_node.Plot = value
	}
	if value, ok := mc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := mc.mutation.Watched(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: movie.FieldWatched,
		})
		_node.Watched = value
	}
	if nodes := mc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   movie.FileTable,
			Columns: []string{movie.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.RatingsTable,
			Columns: []string{movie.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rating.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.PosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   movie.PosterTable,
			Columns: []string{movie.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.movie_poster = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.FanartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.FanartTable,
			Columns: []string{movie.FanartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: picture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.CastIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.CastTable,
			Columns: movie.CastPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.DirectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.DirectorsTable,
			Columns: movie.DirectorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.WritersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.WritersTable,
			Columns: movie.WritersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moviegenre.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.CountriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.CountriesTable,
			Columns: movie.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MovieCreateBulk is the builder for creating many Movie entities in bulk.
type MovieCreateBulk struct {
	config
	builders []*MovieCreate
}

// Save creates the Movie entities in the database.
func (mcb *MovieCreateBulk) Save(ctx context.Context) ([]*Movie, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Movie, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovieMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MovieCreateBulk) SaveX(ctx context.Context) []*Movie {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MovieCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MovieCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
