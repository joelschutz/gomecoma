// Code generated by entc, DO NOT EDIT.

package ogent

import "github.com/joelschutz/gomecoma/src/ent"

func NewArtistCreate(e *ent.Artist) *ArtistCreate {
	if e == nil {
		return nil
	}
	return &ArtistCreate{
		ID:       e.ID,
		Name:     e.Name,
		Birthday: NewOptDateTime(e.Birthday),
	}
}

func NewArtistCreates(es []*ent.Artist) []ArtistCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistCreate, len(es))
	for i, e := range es {
		r[i] = NewArtistCreate(e).Elem()
	}
	return r
}

func (a *ArtistCreate) Elem() ArtistCreate {
	if a == nil {
		return ArtistCreate{}
	}
	return *a
}

func NewArtistList(e *ent.Artist) *ArtistList {
	if e == nil {
		return nil
	}
	return &ArtistList{
		ID:       e.ID,
		Name:     e.Name,
		Birthday: NewOptDateTime(e.Birthday),
	}
}

func NewArtistLists(es []*ent.Artist) []ArtistList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistList, len(es))
	for i, e := range es {
		r[i] = NewArtistList(e).Elem()
	}
	return r
}

func (a *ArtistList) Elem() ArtistList {
	if a == nil {
		return ArtistList{}
	}
	return *a
}

func NewArtistRead(e *ent.Artist) *ArtistRead {
	if e == nil {
		return nil
	}
	return &ArtistRead{
		ID:       e.ID,
		Name:     e.Name,
		Birthday: NewOptDateTime(e.Birthday),
	}
}

func NewArtistReads(es []*ent.Artist) []ArtistRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistRead, len(es))
	for i, e := range es {
		r[i] = NewArtistRead(e).Elem()
	}
	return r
}

func (a *ArtistRead) Elem() ArtistRead {
	if a == nil {
		return ArtistRead{}
	}
	return *a
}

func NewArtistUpdate(e *ent.Artist) *ArtistUpdate {
	if e == nil {
		return nil
	}
	return &ArtistUpdate{
		ID:       e.ID,
		Name:     e.Name,
		Birthday: NewOptDateTime(e.Birthday),
	}
}

func NewArtistUpdates(es []*ent.Artist) []ArtistUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistUpdate, len(es))
	for i, e := range es {
		r[i] = NewArtistUpdate(e).Elem()
	}
	return r
}

func (a *ArtistUpdate) Elem() ArtistUpdate {
	if a == nil {
		return ArtistUpdate{}
	}
	return *a
}

func NewArtistActedList(e *ent.Movie) *ArtistActedList {
	if e == nil {
		return nil
	}
	return &ArtistActedList{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewArtistActedLists(es []*ent.Movie) []ArtistActedList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistActedList, len(es))
	for i, e := range es {
		r[i] = NewArtistActedList(e).Elem()
	}
	return r
}

func (m *ArtistActedList) Elem() ArtistActedList {
	if m == nil {
		return ArtistActedList{}
	}
	return *m
}

func NewArtistCountriesList(e *ent.Country) *ArtistCountriesList {
	if e == nil {
		return nil
	}
	return &ArtistCountriesList{
		ID:   e.ID,
		Name: e.Name,
		Code: e.Code,
	}
}

func NewArtistCountriesLists(es []*ent.Country) []ArtistCountriesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistCountriesList, len(es))
	for i, e := range es {
		r[i] = NewArtistCountriesList(e).Elem()
	}
	return r
}

func (c *ArtistCountriesList) Elem() ArtistCountriesList {
	if c == nil {
		return ArtistCountriesList{}
	}
	return *c
}

func NewArtistDirectedList(e *ent.Movie) *ArtistDirectedList {
	if e == nil {
		return nil
	}
	return &ArtistDirectedList{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewArtistDirectedLists(es []*ent.Movie) []ArtistDirectedList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistDirectedList, len(es))
	for i, e := range es {
		r[i] = NewArtistDirectedList(e).Elem()
	}
	return r
}

func (m *ArtistDirectedList) Elem() ArtistDirectedList {
	if m == nil {
		return ArtistDirectedList{}
	}
	return *m
}

func NewArtistPicturesList(e *ent.Picture) *ArtistPicturesList {
	if e == nil {
		return nil
	}
	return &ArtistPicturesList{
		ID:       e.ID,
		Name:     NewOptString(e.Name),
		Filename: e.Filename,
		Path:     e.Path,
	}
}

func NewArtistPicturesLists(es []*ent.Picture) []ArtistPicturesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistPicturesList, len(es))
	for i, e := range es {
		r[i] = NewArtistPicturesList(e).Elem()
	}
	return r
}

func (pi *ArtistPicturesList) Elem() ArtistPicturesList {
	if pi == nil {
		return ArtistPicturesList{}
	}
	return *pi
}

func NewArtistProfilePictureRead(e *ent.Picture) *ArtistProfilePictureRead {
	if e == nil {
		return nil
	}
	return &ArtistProfilePictureRead{
		ID:       e.ID,
		Name:     NewOptString(e.Name),
		Filename: e.Filename,
		Path:     e.Path,
	}
}

func NewArtistProfilePictureReads(es []*ent.Picture) []ArtistProfilePictureRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistProfilePictureRead, len(es))
	for i, e := range es {
		r[i] = NewArtistProfilePictureRead(e).Elem()
	}
	return r
}

func (pi *ArtistProfilePictureRead) Elem() ArtistProfilePictureRead {
	if pi == nil {
		return ArtistProfilePictureRead{}
	}
	return *pi
}

func NewArtistWroteList(e *ent.Movie) *ArtistWroteList {
	if e == nil {
		return nil
	}
	return &ArtistWroteList{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewArtistWroteLists(es []*ent.Movie) []ArtistWroteList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArtistWroteList, len(es))
	for i, e := range es {
		r[i] = NewArtistWroteList(e).Elem()
	}
	return r
}

func (m *ArtistWroteList) Elem() ArtistWroteList {
	if m == nil {
		return ArtistWroteList{}
	}
	return *m
}

func NewCountryCreate(e *ent.Country) *CountryCreate {
	if e == nil {
		return nil
	}
	return &CountryCreate{
		ID:   e.ID,
		Name: e.Name,
		Code: e.Code,
	}
}

func NewCountryCreates(es []*ent.Country) []CountryCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CountryCreate, len(es))
	for i, e := range es {
		r[i] = NewCountryCreate(e).Elem()
	}
	return r
}

func (c *CountryCreate) Elem() CountryCreate {
	if c == nil {
		return CountryCreate{}
	}
	return *c
}

func NewCountryList(e *ent.Country) *CountryList {
	if e == nil {
		return nil
	}
	return &CountryList{
		ID:   e.ID,
		Name: e.Name,
		Code: e.Code,
	}
}

func NewCountryLists(es []*ent.Country) []CountryList {
	if len(es) == 0 {
		return nil
	}
	r := make([]CountryList, len(es))
	for i, e := range es {
		r[i] = NewCountryList(e).Elem()
	}
	return r
}

func (c *CountryList) Elem() CountryList {
	if c == nil {
		return CountryList{}
	}
	return *c
}

func NewCountryRead(e *ent.Country) *CountryRead {
	if e == nil {
		return nil
	}
	return &CountryRead{
		ID:   e.ID,
		Name: e.Name,
		Code: e.Code,
	}
}

func NewCountryReads(es []*ent.Country) []CountryRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CountryRead, len(es))
	for i, e := range es {
		r[i] = NewCountryRead(e).Elem()
	}
	return r
}

func (c *CountryRead) Elem() CountryRead {
	if c == nil {
		return CountryRead{}
	}
	return *c
}

func NewCountryUpdate(e *ent.Country) *CountryUpdate {
	if e == nil {
		return nil
	}
	return &CountryUpdate{
		ID:   e.ID,
		Name: e.Name,
		Code: e.Code,
	}
}

func NewCountryUpdates(es []*ent.Country) []CountryUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CountryUpdate, len(es))
	for i, e := range es {
		r[i] = NewCountryUpdate(e).Elem()
	}
	return r
}

func (c *CountryUpdate) Elem() CountryUpdate {
	if c == nil {
		return CountryUpdate{}
	}
	return *c
}

func NewCountryArtistsList(e *ent.Artist) *CountryArtistsList {
	if e == nil {
		return nil
	}
	return &CountryArtistsList{
		ID:       e.ID,
		Name:     e.Name,
		Birthday: NewOptDateTime(e.Birthday),
	}
}

func NewCountryArtistsLists(es []*ent.Artist) []CountryArtistsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]CountryArtistsList, len(es))
	for i, e := range es {
		r[i] = NewCountryArtistsList(e).Elem()
	}
	return r
}

func (a *CountryArtistsList) Elem() CountryArtistsList {
	if a == nil {
		return CountryArtistsList{}
	}
	return *a
}

func NewCountryMoviesList(e *ent.Movie) *CountryMoviesList {
	if e == nil {
		return nil
	}
	return &CountryMoviesList{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewCountryMoviesLists(es []*ent.Movie) []CountryMoviesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]CountryMoviesList, len(es))
	for i, e := range es {
		r[i] = NewCountryMoviesList(e).Elem()
	}
	return r
}

func (m *CountryMoviesList) Elem() CountryMoviesList {
	if m == nil {
		return CountryMoviesList{}
	}
	return *m
}

func NewFileCreate(e *ent.File) *FileCreate {
	if e == nil {
		return nil
	}
	return &FileCreate{
		ID:                   e.ID,
		Name:                 e.Name,
		Path:                 e.Path,
		Type:                 FileCreateType(e.Type),
		ExternalID:           NewOptString(e.ExternalID),
		ExternalInfoProvider: NewOptString(e.ExternalInfoProvider),
		Results:              NewOptString(e.Results),
		Synced:               e.Synced,
	}
}

func NewFileCreates(es []*ent.File) []FileCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]FileCreate, len(es))
	for i, e := range es {
		r[i] = NewFileCreate(e).Elem()
	}
	return r
}

func (f *FileCreate) Elem() FileCreate {
	if f == nil {
		return FileCreate{}
	}
	return *f
}

func NewFileList(e *ent.File) *FileList {
	if e == nil {
		return nil
	}
	return &FileList{
		ID:                   e.ID,
		Name:                 e.Name,
		Path:                 e.Path,
		Type:                 FileListType(e.Type),
		ExternalID:           NewOptString(e.ExternalID),
		ExternalInfoProvider: NewOptString(e.ExternalInfoProvider),
		Results:              NewOptString(e.Results),
		Synced:               e.Synced,
	}
}

func NewFileLists(es []*ent.File) []FileList {
	if len(es) == 0 {
		return nil
	}
	r := make([]FileList, len(es))
	for i, e := range es {
		r[i] = NewFileList(e).Elem()
	}
	return r
}

func (f *FileList) Elem() FileList {
	if f == nil {
		return FileList{}
	}
	return *f
}

func NewFileRead(e *ent.File) *FileRead {
	if e == nil {
		return nil
	}
	return &FileRead{
		ID:                   e.ID,
		Name:                 e.Name,
		Path:                 e.Path,
		Type:                 FileReadType(e.Type),
		ExternalID:           NewOptString(e.ExternalID),
		ExternalInfoProvider: NewOptString(e.ExternalInfoProvider),
		Results:              NewOptString(e.Results),
		Synced:               e.Synced,
	}
}

func NewFileReads(es []*ent.File) []FileRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]FileRead, len(es))
	for i, e := range es {
		r[i] = NewFileRead(e).Elem()
	}
	return r
}

func (f *FileRead) Elem() FileRead {
	if f == nil {
		return FileRead{}
	}
	return *f
}

func NewFileUpdate(e *ent.File) *FileUpdate {
	if e == nil {
		return nil
	}
	return &FileUpdate{
		ID:                   e.ID,
		Name:                 e.Name,
		Path:                 e.Path,
		Type:                 FileUpdateType(e.Type),
		ExternalID:           NewOptString(e.ExternalID),
		ExternalInfoProvider: NewOptString(e.ExternalInfoProvider),
		Results:              NewOptString(e.Results),
		Synced:               e.Synced,
	}
}

func NewFileUpdates(es []*ent.File) []FileUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]FileUpdate, len(es))
	for i, e := range es {
		r[i] = NewFileUpdate(e).Elem()
	}
	return r
}

func (f *FileUpdate) Elem() FileUpdate {
	if f == nil {
		return FileUpdate{}
	}
	return *f
}

func NewFileMovieRead(e *ent.Movie) *FileMovieRead {
	if e == nil {
		return nil
	}
	return &FileMovieRead{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewFileMovieReads(es []*ent.Movie) []FileMovieRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]FileMovieRead, len(es))
	for i, e := range es {
		r[i] = NewFileMovieRead(e).Elem()
	}
	return r
}

func (m *FileMovieRead) Elem() FileMovieRead {
	if m == nil {
		return FileMovieRead{}
	}
	return *m
}

func NewMovieCreate(e *ent.Movie) *MovieCreate {
	if e == nil {
		return nil
	}
	return &MovieCreate{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewMovieCreates(es []*ent.Movie) []MovieCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieCreate, len(es))
	for i, e := range es {
		r[i] = NewMovieCreate(e).Elem()
	}
	return r
}

func (m *MovieCreate) Elem() MovieCreate {
	if m == nil {
		return MovieCreate{}
	}
	return *m
}

func NewMovieGenreCreate(e *ent.MovieGenre) *MovieGenreCreate {
	if e == nil {
		return nil
	}
	return &MovieGenreCreate{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewMovieGenreCreates(es []*ent.MovieGenre) []MovieGenreCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieGenreCreate, len(es))
	for i, e := range es {
		r[i] = NewMovieGenreCreate(e).Elem()
	}
	return r
}

func (mg *MovieGenreCreate) Elem() MovieGenreCreate {
	if mg == nil {
		return MovieGenreCreate{}
	}
	return *mg
}

func NewMovieGenreList(e *ent.MovieGenre) *MovieGenreList {
	if e == nil {
		return nil
	}
	return &MovieGenreList{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewMovieGenreLists(es []*ent.MovieGenre) []MovieGenreList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieGenreList, len(es))
	for i, e := range es {
		r[i] = NewMovieGenreList(e).Elem()
	}
	return r
}

func (mg *MovieGenreList) Elem() MovieGenreList {
	if mg == nil {
		return MovieGenreList{}
	}
	return *mg
}

func NewMovieGenreRead(e *ent.MovieGenre) *MovieGenreRead {
	if e == nil {
		return nil
	}
	return &MovieGenreRead{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewMovieGenreReads(es []*ent.MovieGenre) []MovieGenreRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieGenreRead, len(es))
	for i, e := range es {
		r[i] = NewMovieGenreRead(e).Elem()
	}
	return r
}

func (mg *MovieGenreRead) Elem() MovieGenreRead {
	if mg == nil {
		return MovieGenreRead{}
	}
	return *mg
}

func NewMovieGenreUpdate(e *ent.MovieGenre) *MovieGenreUpdate {
	if e == nil {
		return nil
	}
	return &MovieGenreUpdate{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewMovieGenreUpdates(es []*ent.MovieGenre) []MovieGenreUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieGenreUpdate, len(es))
	for i, e := range es {
		r[i] = NewMovieGenreUpdate(e).Elem()
	}
	return r
}

func (mg *MovieGenreUpdate) Elem() MovieGenreUpdate {
	if mg == nil {
		return MovieGenreUpdate{}
	}
	return *mg
}

func NewMovieGenreMoviesList(e *ent.Movie) *MovieGenreMoviesList {
	if e == nil {
		return nil
	}
	return &MovieGenreMoviesList{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewMovieGenreMoviesLists(es []*ent.Movie) []MovieGenreMoviesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieGenreMoviesList, len(es))
	for i, e := range es {
		r[i] = NewMovieGenreMoviesList(e).Elem()
	}
	return r
}

func (m *MovieGenreMoviesList) Elem() MovieGenreMoviesList {
	if m == nil {
		return MovieGenreMoviesList{}
	}
	return *m
}

func NewMovieList(e *ent.Movie) *MovieList {
	if e == nil {
		return nil
	}
	return &MovieList{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewMovieLists(es []*ent.Movie) []MovieList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieList, len(es))
	for i, e := range es {
		r[i] = NewMovieList(e).Elem()
	}
	return r
}

func (m *MovieList) Elem() MovieList {
	if m == nil {
		return MovieList{}
	}
	return *m
}

func NewMovieRead(e *ent.Movie) *MovieRead {
	if e == nil {
		return nil
	}
	return &MovieRead{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewMovieReads(es []*ent.Movie) []MovieRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieRead, len(es))
	for i, e := range es {
		r[i] = NewMovieRead(e).Elem()
	}
	return r
}

func (m *MovieRead) Elem() MovieRead {
	if m == nil {
		return MovieRead{}
	}
	return *m
}

func NewMovieUpdate(e *ent.Movie) *MovieUpdate {
	if e == nil {
		return nil
	}
	return &MovieUpdate{
		ID:            e.ID,
		Title:         e.Title,
		OriginalTitle: NewOptString(e.OriginalTitle),
		ReleaseDate:   NewOptDateTime(e.ReleaseDate),
		Plot:          NewOptString(e.Plot),
		Duration:      NewOptInt(e.Duration),
		Watched:       e.Watched,
	}
}

func NewMovieUpdates(es []*ent.Movie) []MovieUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieUpdate, len(es))
	for i, e := range es {
		r[i] = NewMovieUpdate(e).Elem()
	}
	return r
}

func (m *MovieUpdate) Elem() MovieUpdate {
	if m == nil {
		return MovieUpdate{}
	}
	return *m
}

func NewMovieCastList(e *ent.Artist) *MovieCastList {
	if e == nil {
		return nil
	}
	return &MovieCastList{
		ID:       e.ID,
		Name:     e.Name,
		Birthday: NewOptDateTime(e.Birthday),
	}
}

func NewMovieCastLists(es []*ent.Artist) []MovieCastList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieCastList, len(es))
	for i, e := range es {
		r[i] = NewMovieCastList(e).Elem()
	}
	return r
}

func (a *MovieCastList) Elem() MovieCastList {
	if a == nil {
		return MovieCastList{}
	}
	return *a
}

func NewMovieCountriesList(e *ent.Country) *MovieCountriesList {
	if e == nil {
		return nil
	}
	return &MovieCountriesList{
		ID:   e.ID,
		Name: e.Name,
		Code: e.Code,
	}
}

func NewMovieCountriesLists(es []*ent.Country) []MovieCountriesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieCountriesList, len(es))
	for i, e := range es {
		r[i] = NewMovieCountriesList(e).Elem()
	}
	return r
}

func (c *MovieCountriesList) Elem() MovieCountriesList {
	if c == nil {
		return MovieCountriesList{}
	}
	return *c
}

func NewMovieDirectorsList(e *ent.Artist) *MovieDirectorsList {
	if e == nil {
		return nil
	}
	return &MovieDirectorsList{
		ID:       e.ID,
		Name:     e.Name,
		Birthday: NewOptDateTime(e.Birthday),
	}
}

func NewMovieDirectorsLists(es []*ent.Artist) []MovieDirectorsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieDirectorsList, len(es))
	for i, e := range es {
		r[i] = NewMovieDirectorsList(e).Elem()
	}
	return r
}

func (a *MovieDirectorsList) Elem() MovieDirectorsList {
	if a == nil {
		return MovieDirectorsList{}
	}
	return *a
}

func NewMovieFanartList(e *ent.Picture) *MovieFanartList {
	if e == nil {
		return nil
	}
	return &MovieFanartList{
		ID:       e.ID,
		Name:     NewOptString(e.Name),
		Filename: e.Filename,
		Path:     e.Path,
	}
}

func NewMovieFanartLists(es []*ent.Picture) []MovieFanartList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieFanartList, len(es))
	for i, e := range es {
		r[i] = NewMovieFanartList(e).Elem()
	}
	return r
}

func (pi *MovieFanartList) Elem() MovieFanartList {
	if pi == nil {
		return MovieFanartList{}
	}
	return *pi
}

func NewMovieFileRead(e *ent.File) *MovieFileRead {
	if e == nil {
		return nil
	}
	return &MovieFileRead{
		ID:                   e.ID,
		Name:                 e.Name,
		Path:                 e.Path,
		Type:                 MovieFileReadType(e.Type),
		ExternalID:           NewOptString(e.ExternalID),
		ExternalInfoProvider: NewOptString(e.ExternalInfoProvider),
		Results:              NewOptString(e.Results),
		Synced:               e.Synced,
	}
}

func NewMovieFileReads(es []*ent.File) []MovieFileRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieFileRead, len(es))
	for i, e := range es {
		r[i] = NewMovieFileRead(e).Elem()
	}
	return r
}

func (f *MovieFileRead) Elem() MovieFileRead {
	if f == nil {
		return MovieFileRead{}
	}
	return *f
}

func NewMovieGenresList(e *ent.MovieGenre) *MovieGenresList {
	if e == nil {
		return nil
	}
	return &MovieGenresList{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewMovieGenresLists(es []*ent.MovieGenre) []MovieGenresList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieGenresList, len(es))
	for i, e := range es {
		r[i] = NewMovieGenresList(e).Elem()
	}
	return r
}

func (mg *MovieGenresList) Elem() MovieGenresList {
	if mg == nil {
		return MovieGenresList{}
	}
	return *mg
}

func NewMoviePosterRead(e *ent.Picture) *MoviePosterRead {
	if e == nil {
		return nil
	}
	return &MoviePosterRead{
		ID:       e.ID,
		Name:     NewOptString(e.Name),
		Filename: e.Filename,
		Path:     e.Path,
	}
}

func NewMoviePosterReads(es []*ent.Picture) []MoviePosterRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]MoviePosterRead, len(es))
	for i, e := range es {
		r[i] = NewMoviePosterRead(e).Elem()
	}
	return r
}

func (pi *MoviePosterRead) Elem() MoviePosterRead {
	if pi == nil {
		return MoviePosterRead{}
	}
	return *pi
}

func NewMovieRatingsList(e *ent.Rating) *MovieRatingsList {
	if e == nil {
		return nil
	}
	return &MovieRatingsList{
		ID:               e.ID,
		Origin:           e.Origin,
		OriginalRating:   e.OriginalRating,
		NormalizedRating: e.NormalizedRating,
	}
}

func NewMovieRatingsLists(es []*ent.Rating) []MovieRatingsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieRatingsList, len(es))
	for i, e := range es {
		r[i] = NewMovieRatingsList(e).Elem()
	}
	return r
}

func (r *MovieRatingsList) Elem() MovieRatingsList {
	if r == nil {
		return MovieRatingsList{}
	}
	return *r
}

func NewMovieWritersList(e *ent.Artist) *MovieWritersList {
	if e == nil {
		return nil
	}
	return &MovieWritersList{
		ID:       e.ID,
		Name:     e.Name,
		Birthday: NewOptDateTime(e.Birthday),
	}
}

func NewMovieWritersLists(es []*ent.Artist) []MovieWritersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MovieWritersList, len(es))
	for i, e := range es {
		r[i] = NewMovieWritersList(e).Elem()
	}
	return r
}

func (a *MovieWritersList) Elem() MovieWritersList {
	if a == nil {
		return MovieWritersList{}
	}
	return *a
}

func NewPictureCreate(e *ent.Picture) *PictureCreate {
	if e == nil {
		return nil
	}
	return &PictureCreate{
		ID:       e.ID,
		Name:     NewOptString(e.Name),
		Filename: e.Filename,
		Path:     e.Path,
	}
}

func NewPictureCreates(es []*ent.Picture) []PictureCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PictureCreate, len(es))
	for i, e := range es {
		r[i] = NewPictureCreate(e).Elem()
	}
	return r
}

func (pi *PictureCreate) Elem() PictureCreate {
	if pi == nil {
		return PictureCreate{}
	}
	return *pi
}

func NewPictureList(e *ent.Picture) *PictureList {
	if e == nil {
		return nil
	}
	return &PictureList{
		ID:       e.ID,
		Name:     NewOptString(e.Name),
		Filename: e.Filename,
		Path:     e.Path,
	}
}

func NewPictureLists(es []*ent.Picture) []PictureList {
	if len(es) == 0 {
		return nil
	}
	r := make([]PictureList, len(es))
	for i, e := range es {
		r[i] = NewPictureList(e).Elem()
	}
	return r
}

func (pi *PictureList) Elem() PictureList {
	if pi == nil {
		return PictureList{}
	}
	return *pi
}

func NewPictureRead(e *ent.Picture) *PictureRead {
	if e == nil {
		return nil
	}
	return &PictureRead{
		ID:       e.ID,
		Name:     NewOptString(e.Name),
		Filename: e.Filename,
		Path:     e.Path,
	}
}

func NewPictureReads(es []*ent.Picture) []PictureRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]PictureRead, len(es))
	for i, e := range es {
		r[i] = NewPictureRead(e).Elem()
	}
	return r
}

func (pi *PictureRead) Elem() PictureRead {
	if pi == nil {
		return PictureRead{}
	}
	return *pi
}

func NewPictureUpdate(e *ent.Picture) *PictureUpdate {
	if e == nil {
		return nil
	}
	return &PictureUpdate{
		ID:       e.ID,
		Name:     NewOptString(e.Name),
		Filename: e.Filename,
		Path:     e.Path,
	}
}

func NewPictureUpdates(es []*ent.Picture) []PictureUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PictureUpdate, len(es))
	for i, e := range es {
		r[i] = NewPictureUpdate(e).Elem()
	}
	return r
}

func (pi *PictureUpdate) Elem() PictureUpdate {
	if pi == nil {
		return PictureUpdate{}
	}
	return *pi
}

func NewRatingCreate(e *ent.Rating) *RatingCreate {
	if e == nil {
		return nil
	}
	return &RatingCreate{
		ID:               e.ID,
		Origin:           e.Origin,
		OriginalRating:   e.OriginalRating,
		NormalizedRating: e.NormalizedRating,
	}
}

func NewRatingCreates(es []*ent.Rating) []RatingCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RatingCreate, len(es))
	for i, e := range es {
		r[i] = NewRatingCreate(e).Elem()
	}
	return r
}

func (r *RatingCreate) Elem() RatingCreate {
	if r == nil {
		return RatingCreate{}
	}
	return *r
}

func NewRatingList(e *ent.Rating) *RatingList {
	if e == nil {
		return nil
	}
	return &RatingList{
		ID:               e.ID,
		Origin:           e.Origin,
		OriginalRating:   e.OriginalRating,
		NormalizedRating: e.NormalizedRating,
	}
}

func NewRatingLists(es []*ent.Rating) []RatingList {
	if len(es) == 0 {
		return nil
	}
	r := make([]RatingList, len(es))
	for i, e := range es {
		r[i] = NewRatingList(e).Elem()
	}
	return r
}

func (r *RatingList) Elem() RatingList {
	if r == nil {
		return RatingList{}
	}
	return *r
}

func NewRatingRead(e *ent.Rating) *RatingRead {
	if e == nil {
		return nil
	}
	return &RatingRead{
		ID:               e.ID,
		Origin:           e.Origin,
		OriginalRating:   e.OriginalRating,
		NormalizedRating: e.NormalizedRating,
	}
}

func NewRatingReads(es []*ent.Rating) []RatingRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]RatingRead, len(es))
	for i, e := range es {
		r[i] = NewRatingRead(e).Elem()
	}
	return r
}

func (r *RatingRead) Elem() RatingRead {
	if r == nil {
		return RatingRead{}
	}
	return *r
}

func NewRatingUpdate(e *ent.Rating) *RatingUpdate {
	if e == nil {
		return nil
	}
	return &RatingUpdate{
		ID:               e.ID,
		Origin:           e.Origin,
		OriginalRating:   e.OriginalRating,
		NormalizedRating: e.NormalizedRating,
	}
}

func NewRatingUpdates(es []*ent.Rating) []RatingUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RatingUpdate, len(es))
	for i, e := range es {
		r[i] = NewRatingUpdate(e).Elem()
	}
	return r
}

func (r *RatingUpdate) Elem() RatingUpdate {
	if r == nil {
		return RatingUpdate{}
	}
	return *r
}
