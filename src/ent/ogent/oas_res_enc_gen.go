// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = big.Rat{}
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = attribute.KeyValue{}
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

func encodeCreateArtistResponse(response CreateArtistRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ArtistCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists"+`: unexpected response type: %T`, response)
	}
}

func encodeCreateCountryResponse(response CreateCountryRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CountryCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/countries"+`: unexpected response type: %T`, response)
	}
}

func encodeCreateFileResponse(response CreateFileRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *FileCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/files"+`: unexpected response type: %T`, response)
	}
}

func encodeCreateMovieResponse(response CreateMovieRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovieCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies"+`: unexpected response type: %T`, response)
	}
}

func encodeCreateMovieGenreResponse(response CreateMovieGenreRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovieGenreCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movie-genres"+`: unexpected response type: %T`, response)
	}
}

func encodeCreatePictureResponse(response CreatePictureRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PictureCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/pictures"+`: unexpected response type: %T`, response)
	}
}

func encodeCreateRatingResponse(response CreateRatingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RatingCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/ratings"+`: unexpected response type: %T`, response)
	}
}

func encodeDeleteArtistResponse(response DeleteArtistRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteArtistNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeDeleteCountryResponse(response DeleteCountryRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteCountryNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/countries/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeDeleteFileResponse(response DeleteFileRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteFileNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/files/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeDeleteMovieResponse(response DeleteMovieRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteMovieNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeDeleteMovieGenreResponse(response DeleteMovieGenreRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteMovieGenreNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movie-genres/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeDeletePictureResponse(response DeletePictureRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeletePictureNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/pictures/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeDeleteRatingResponse(response DeleteRatingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteRatingNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/ratings/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeListArtistResponse(response ListArtistRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListArtistOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists"+`: unexpected response type: %T`, response)
	}
}

func encodeListArtistActedResponse(response ListArtistActedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListArtistActedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists/{id}/acted"+`: unexpected response type: %T`, response)
	}
}

func encodeListArtistCountriesResponse(response ListArtistCountriesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListArtistCountriesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists/{id}/countries"+`: unexpected response type: %T`, response)
	}
}

func encodeListArtistDirectedResponse(response ListArtistDirectedRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListArtistDirectedOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists/{id}/directed"+`: unexpected response type: %T`, response)
	}
}

func encodeListArtistPicturesResponse(response ListArtistPicturesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListArtistPicturesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists/{id}/pictures"+`: unexpected response type: %T`, response)
	}
}

func encodeListArtistWroteResponse(response ListArtistWroteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListArtistWroteOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists/{id}/wrote"+`: unexpected response type: %T`, response)
	}
}

func encodeListCountryResponse(response ListCountryRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCountryOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/countries"+`: unexpected response type: %T`, response)
	}
}

func encodeListCountryArtistsResponse(response ListCountryArtistsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCountryArtistsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/countries/{id}/artists"+`: unexpected response type: %T`, response)
	}
}

func encodeListCountryMoviesResponse(response ListCountryMoviesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListCountryMoviesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/countries/{id}/movies"+`: unexpected response type: %T`, response)
	}
}

func encodeListFileResponse(response ListFileRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListFileOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/files"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieResponse(response ListMovieRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieCastResponse(response ListMovieCastRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieCastOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}/cast"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieCountriesResponse(response ListMovieCountriesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieCountriesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}/countries"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieDirectorsResponse(response ListMovieDirectorsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieDirectorsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}/directors"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieFanartResponse(response ListMovieFanartRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieFanartOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}/fanart"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieGenreResponse(response ListMovieGenreRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieGenreOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movie-genres"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieGenreMoviesResponse(response ListMovieGenreMoviesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieGenreMoviesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movie-genres/{id}/movies"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieGenresResponse(response ListMovieGenresRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieGenresOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}/genres"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieRatingsResponse(response ListMovieRatingsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieRatingsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}/ratings"+`: unexpected response type: %T`, response)
	}
}

func encodeListMovieWritersResponse(response ListMovieWritersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListMovieWritersOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}/writers"+`: unexpected response type: %T`, response)
	}
}

func encodeListPictureResponse(response ListPictureRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListPictureOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/pictures"+`: unexpected response type: %T`, response)
	}
}

func encodeListRatingResponse(response ListRatingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListRatingOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/ratings"+`: unexpected response type: %T`, response)
	}
}

func encodeReadArtistResponse(response ReadArtistRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ArtistRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadArtistProfilePictureResponse(response ReadArtistProfilePictureRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ArtistProfilePictureRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists/{id}/profile-picture"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCountryResponse(response ReadCountryRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CountryRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/countries/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFileResponse(response ReadFileRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *FileRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/files/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFileMovieResponse(response ReadFileMovieRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *FileMovieRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/files/{id}/movie"+`: unexpected response type: %T`, response)
	}
}

func encodeReadMovieResponse(response ReadMovieRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovieRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadMovieFileResponse(response ReadMovieFileRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovieFileRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}/file"+`: unexpected response type: %T`, response)
	}
}

func encodeReadMovieGenreResponse(response ReadMovieGenreRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovieGenreRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movie-genres/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadMoviePosterResponse(response ReadMoviePosterRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MoviePosterRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}/poster"+`: unexpected response type: %T`, response)
	}
}

func encodeReadPictureResponse(response ReadPictureRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PictureRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/pictures/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadRatingResponse(response ReadRatingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RatingRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/ratings/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdateArtistResponse(response UpdateArtistRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ArtistUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/artists/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdateCountryResponse(response UpdateCountryRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *CountryUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/countries/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdateFileResponse(response UpdateFileRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *FileUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/files/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdateMovieResponse(response UpdateMovieRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovieUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movies/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdateMovieGenreResponse(response UpdateMovieGenreRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovieGenreUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/movie-genres/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdatePictureResponse(response UpdatePictureRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *PictureUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/pictures/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdateRatingResponse(response UpdateRatingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *RatingUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/ratings/{id}"+`: unexpected response type: %T`, response)
	}
}
