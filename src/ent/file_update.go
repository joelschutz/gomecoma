// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/joelschutz/gomecoma/src/ent/file"
	"github.com/joelschutz/gomecoma/src/ent/movie"
	"github.com/joelschutz/gomecoma/src/ent/predicate"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FileUpdate) SetName(s string) *FileUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetPath sets the "path" field.
func (fu *FileUpdate) SetPath(s string) *FileUpdate {
	fu.mutation.SetPath(s)
	return fu
}

// SetType sets the "type" field.
func (fu *FileUpdate) SetType(f file.Type) *FileUpdate {
	fu.mutation.SetType(f)
	return fu
}

// SetExternalID sets the "external_id" field.
func (fu *FileUpdate) SetExternalID(s string) *FileUpdate {
	fu.mutation.SetExternalID(s)
	return fu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (fu *FileUpdate) SetNillableExternalID(s *string) *FileUpdate {
	if s != nil {
		fu.SetExternalID(*s)
	}
	return fu
}

// ClearExternalID clears the value of the "external_id" field.
func (fu *FileUpdate) ClearExternalID() *FileUpdate {
	fu.mutation.ClearExternalID()
	return fu
}

// SetExternalInfoProvider sets the "external_info_provider" field.
func (fu *FileUpdate) SetExternalInfoProvider(s string) *FileUpdate {
	fu.mutation.SetExternalInfoProvider(s)
	return fu
}

// SetNillableExternalInfoProvider sets the "external_info_provider" field if the given value is not nil.
func (fu *FileUpdate) SetNillableExternalInfoProvider(s *string) *FileUpdate {
	if s != nil {
		fu.SetExternalInfoProvider(*s)
	}
	return fu
}

// ClearExternalInfoProvider clears the value of the "external_info_provider" field.
func (fu *FileUpdate) ClearExternalInfoProvider() *FileUpdate {
	fu.mutation.ClearExternalInfoProvider()
	return fu
}

// SetResults sets the "results" field.
func (fu *FileUpdate) SetResults(s string) *FileUpdate {
	fu.mutation.SetResults(s)
	return fu
}

// SetNillableResults sets the "results" field if the given value is not nil.
func (fu *FileUpdate) SetNillableResults(s *string) *FileUpdate {
	if s != nil {
		fu.SetResults(*s)
	}
	return fu
}

// ClearResults clears the value of the "results" field.
func (fu *FileUpdate) ClearResults() *FileUpdate {
	fu.mutation.ClearResults()
	return fu
}

// SetSynced sets the "synced" field.
func (fu *FileUpdate) SetSynced(b bool) *FileUpdate {
	fu.mutation.SetSynced(b)
	return fu
}

// SetNillableSynced sets the "synced" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSynced(b *bool) *FileUpdate {
	if b != nil {
		fu.SetSynced(*b)
	}
	return fu
}

// SetMovieID sets the "movie" edge to the Movie entity by ID.
func (fu *FileUpdate) SetMovieID(id int) *FileUpdate {
	fu.mutation.SetMovieID(id)
	return fu
}

// SetNillableMovieID sets the "movie" edge to the Movie entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableMovieID(id *int) *FileUpdate {
	if id != nil {
		fu = fu.SetMovieID(*id)
	}
	return fu
}

// SetMovie sets the "movie" edge to the Movie entity.
func (fu *FileUpdate) SetMovie(m *Movie) *FileUpdate {
	return fu.SetMovieID(m.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearMovie clears the "movie" edge to the Movie entity.
func (fu *FileUpdate) ClearMovie() *FileUpdate {
	fu.mutation.ClearMovie()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileUpdate) check() error {
	if v, ok := fu.mutation.GetType(); ok {
		if err := file.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "File.type": %w`, err)}
		}
	}
	return nil
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   file.Table,
			Columns: file.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: file.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldName,
		})
	}
	if value, ok := fu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldPath,
		})
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: file.FieldType,
		})
	}
	if value, ok := fu.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldExternalID,
		})
	}
	if fu.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: file.FieldExternalID,
		})
	}
	if value, ok := fu.mutation.ExternalInfoProvider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldExternalInfoProvider,
		})
	}
	if fu.mutation.ExternalInfoProviderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: file.FieldExternalInfoProvider,
		})
	}
	if value, ok := fu.mutation.Results(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldResults,
		})
	}
	if fu.mutation.ResultsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: file.FieldResults,
		})
	}
	if value, ok := fu.mutation.Synced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: file.FieldSynced,
		})
	}
	if fu.mutation.MovieCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   file.MovieTable,
			Columns: []string{file.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.MovieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   file.MovieTable,
			Columns: []string{file.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetName sets the "name" field.
func (fuo *FileUpdateOne) SetName(s string) *FileUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetPath sets the "path" field.
func (fuo *FileUpdateOne) SetPath(s string) *FileUpdateOne {
	fuo.mutation.SetPath(s)
	return fuo
}

// SetType sets the "type" field.
func (fuo *FileUpdateOne) SetType(f file.Type) *FileUpdateOne {
	fuo.mutation.SetType(f)
	return fuo
}

// SetExternalID sets the "external_id" field.
func (fuo *FileUpdateOne) SetExternalID(s string) *FileUpdateOne {
	fuo.mutation.SetExternalID(s)
	return fuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableExternalID(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetExternalID(*s)
	}
	return fuo
}

// ClearExternalID clears the value of the "external_id" field.
func (fuo *FileUpdateOne) ClearExternalID() *FileUpdateOne {
	fuo.mutation.ClearExternalID()
	return fuo
}

// SetExternalInfoProvider sets the "external_info_provider" field.
func (fuo *FileUpdateOne) SetExternalInfoProvider(s string) *FileUpdateOne {
	fuo.mutation.SetExternalInfoProvider(s)
	return fuo
}

// SetNillableExternalInfoProvider sets the "external_info_provider" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableExternalInfoProvider(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetExternalInfoProvider(*s)
	}
	return fuo
}

// ClearExternalInfoProvider clears the value of the "external_info_provider" field.
func (fuo *FileUpdateOne) ClearExternalInfoProvider() *FileUpdateOne {
	fuo.mutation.ClearExternalInfoProvider()
	return fuo
}

// SetResults sets the "results" field.
func (fuo *FileUpdateOne) SetResults(s string) *FileUpdateOne {
	fuo.mutation.SetResults(s)
	return fuo
}

// SetNillableResults sets the "results" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableResults(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetResults(*s)
	}
	return fuo
}

// ClearResults clears the value of the "results" field.
func (fuo *FileUpdateOne) ClearResults() *FileUpdateOne {
	fuo.mutation.ClearResults()
	return fuo
}

// SetSynced sets the "synced" field.
func (fuo *FileUpdateOne) SetSynced(b bool) *FileUpdateOne {
	fuo.mutation.SetSynced(b)
	return fuo
}

// SetNillableSynced sets the "synced" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSynced(b *bool) *FileUpdateOne {
	if b != nil {
		fuo.SetSynced(*b)
	}
	return fuo
}

// SetMovieID sets the "movie" edge to the Movie entity by ID.
func (fuo *FileUpdateOne) SetMovieID(id int) *FileUpdateOne {
	fuo.mutation.SetMovieID(id)
	return fuo
}

// SetNillableMovieID sets the "movie" edge to the Movie entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableMovieID(id *int) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetMovieID(*id)
	}
	return fuo
}

// SetMovie sets the "movie" edge to the Movie entity.
func (fuo *FileUpdateOne) SetMovie(m *Movie) *FileUpdateOne {
	return fuo.SetMovieID(m.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearMovie clears the "movie" edge to the Movie entity.
func (fuo *FileUpdateOne) ClearMovie() *FileUpdateOne {
	fuo.mutation.ClearMovie()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	var (
		err  error
		node *File
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileUpdateOne) check() error {
	if v, ok := fuo.mutation.GetType(); ok {
		if err := file.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "File.type": %w`, err)}
		}
	}
	return nil
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   file.Table,
			Columns: file.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: file.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldName,
		})
	}
	if value, ok := fuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldPath,
		})
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: file.FieldType,
		})
	}
	if value, ok := fuo.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldExternalID,
		})
	}
	if fuo.mutation.ExternalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: file.FieldExternalID,
		})
	}
	if value, ok := fuo.mutation.ExternalInfoProvider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldExternalInfoProvider,
		})
	}
	if fuo.mutation.ExternalInfoProviderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: file.FieldExternalInfoProvider,
		})
	}
	if value, ok := fuo.mutation.Results(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: file.FieldResults,
		})
	}
	if fuo.mutation.ResultsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: file.FieldResults,
		})
	}
	if value, ok := fuo.mutation.Synced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: file.FieldSynced,
		})
	}
	if fuo.mutation.MovieCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   file.MovieTable,
			Columns: []string{file.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.MovieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   file.MovieTable,
			Columns: []string{file.MovieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
